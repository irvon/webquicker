// 当前该框架尚处于测试阶段，请勿在实际工程中使用
// http://localhost

_DEBUG = true;

// import debug.log;
namespace debug.log {
	write = function () {};
	flush = function () {};
}

import webquicker.service;

/*初始化{{*/
var hServiceStatus;
var SERVICE_STATUS = webquicker.service.SERVICE_STATUS();
webquicker.service.MAIN_SERVICE_STATUS = SERVICE_STATUS;

// 初始化
init = function () {
	select _CMDLINE {
		case "-i" {
			// 安装服务
			webquicker.service.install();
		}
		case "-u" {
			// 卸载服务
			webquicker.service.uninstall();
		}
		case "-s" {
			// 启动服务
			var SERVICE_TABLE_ENTRY = {};
			SERVICE_TABLE_ENTRY[1] = webquicker.service.SERVICE_TABLE_ENTRY();
			SERVICE_TABLE_ENTRY[2] = webquicker.service.SERVICE_TABLE_ENTRY();
			
			SERVICE_TABLE_ENTRY[1].lpServiceName = _SERVICE_NAME;
			SERVICE_TABLE_ENTRY[1].lpServiceProc = raw.tostdcall(serviceMain, "(int, string)");
			
			debug.log.write("StartServiceCtrlDispatcher...");
			debug.log.flush();
			webquicker.service.StartServiceCtrlDispatcher(raw.toarray(SERVICE_TABLE_ENTRY));
			debug.log.write("StartServiceCtrlDispatcher...OK!");
			debug.log.flush();
		}
	}
}

// 服务主体
serviceMain = function (dwArgc, lpszArgv) {
	debug.log.write("ServiceMain...");
	debug.log.flush();
	if (startService()) {
		debug.log.write("RegisterServiceCtrlHandler...");
		debug.log.flush();
		hServiceStatus = webquicker.service.RegisterServiceCtrlHandler(_SERVICE_NAME, raw.tostdcall(serviceHandler, "(int)"));
		debug.log.write("RegisterServiceCtrlHandler...OK!");
		debug.log.flush();
		if (!hServiceStatus) {
			SERVICE_STATUS.dwCurrentState = 0x2/*_SERVICE_START_PENDING*/;
		} else {
			SERVICE_STATUS.dwCurrentState = 0x4/*_SERVICE_RUNNING*/;
		}
		SERVICE_STATUS.dwWin32ExitCode = 0x0/*_NO_ERROR*/;
	} else {
		SERVICE_STATUS.dwCurrentState = 0x2/*_SERVICE_START_PENDING*/;
		SERVICE_STATUS.dwWin32ExitCode = -1;
	}
	
	SERVICE_STATUS.dwServiceType = 0x20/*_SERVICE_WIN32_SHARE_PROCESS*/
	SERVICE_STATUS.dwControlsAccepted = 0x4 | 0x1/*_SERVICE_ACCEPT_SHUTDOWN | _SERVICE_ACCEPT_STOP*/
	
	webquicker.service.SetServiceStatus(hServiceStatus, SERVICE_STATUS);
	if (SERVICE_STATUS.dwWin32ExitCode != 0x0/*_NO_ERROR*/) {
		::ExitProcess(SERVICE_STATUS.dwWin32ExitCode);
	}
	debug.log.write("SetServiceStatus");
	debug.log.flush();
}

// 服务 Handler
serviceHandler = function (fdwControl) {
	if (fdwControl == 0x5/*_SERVICE_CONTROL_SHUTDOWN*/ || fdwControl == 0x1/*_SERVICE_CONTROL_STOP*/) {
		SERVICE_STATUS.dwCurrentState = 0x1/*_SERVICE_STOPPED*/;
		webserver.stop();
	}
	webquicker.service.SetServiceStatus(hServiceStatus, SERVICE_STATUS);
}

// 服务函数
startService = function () {
	import fsys.ini;
	// 读取配置文件
	settings = {};
	var ini = fsys.ini("/config/config.ini");
	settings["port"] = tonumber(ini.read("Server", "Port", "80"));
	settings["maxThreadCount"] = tonumber(ini.read("Server", "MaxThreadCount", "20"));
	settings["wwwroot"] = ini.read("Server", "DocumentDirectory", "/public_html/");
	debug.log.write(table.tostring(settings));
	
	import webquicker.server;
	webserver = webquicker.server(settings["maxThreadCount"]);
	var hasError = false;
	try {
		webserver.start(settings["port"], accept);
	} catch (e) {
		hasError = true;
	}
	return !hasError;
}
/*}}*/

// 处理函数（在子线程中）
accept = function (hSocket, settings) {
	import fsys;
	import fsys.file;
	import webquicker.parser;
	
	var data = "";
	var len, buffer;
	
	while (!string.endWith(data, '\r\n\r\n') && !string.endWith(data, '\n\n')) {
		len, buffer = wsock.recv(hSocket, 1, 1, 0);
		if (len <= 0) {
			break;
		}
		data = data + buffer;
	}
	
	var info = webquicker.parser.parseRequest(data);
	
	// 如果有附加的数据(POST)
	var contentLength = tonumber(info.header[["Content-Length"]] or "0");
	if (contentLength) {
		len, buffer = wsock.recv(hSocket, contentLength, contentLength, 0);
		data = data + buffer;
		info = webquicker.parser.parseRequest(data);
	}
	
	response = webquicker.parser.response(hSocket, self);
	request = info;
	
	// 错误处理
	err_404 = function () {
		response.status = "404 File Not Found";
		response.body = "<html><head><title>File Not Found</title></head><body><h1>404 File Not Found</h1>";
		response.body += "</body></html>";
	}
	
	err_500 = function (msg) {
		response.status = "500 Internal Server Error";
		response.body = "<html><head><title>Script Error</title></head><body><h1>Script Error</h1>";
		response.body += "<hr/><p><strong>Message: </strong>" + msg + "</p></body></html>";
	}
	
	// 执行 aau
	loadPage = function (path) {
		var realPath = string.sub(path, 2, 2) == ":" ? path : fsys.joinpath(io.fullpath(settings["wwwroot"]), path + ".aau");
		realPath = string.replace(realPath, "\\", "/");
		realPath = string.replace(realPath, "/+", "/");
		if (!io.exist(realPath)) {
			err_404();
		} else {
			loadcode("/res/standard.aau")(realPath);
			var SetCurrentDirectory = ::Kernel32.api("SetCurrentDirectory", "int(string)");
			SetCurrentDirectory(io.fullpath(settings["wwwroot"]));
			var func, err = loadcode(realPath);
			if (func) {
				var ok, err = call(func, realPath);
				if (!ok) {
					err_500(err or "Unknown");
				}
			} else {
				err_500(err or "Unknown");
			}
		}
	}
	
	// 释放资源
	self["_RELEASE "] = function () {
		for (k, v in self) {
			if (!SELF_TABLE[k] && type(self[k]) == type.table) {
				self[k] = null;
			}
		}
		SELF_TABLE = null;
		collectgarbage();
	}
	
	var flag = false;
	
	SELF_TABLE = {};
	
	if (info.requireRedirect) {
		response.redirect(info.url);
	} else {
		var fullpath = fsys.joinpath(io.fullpath(settings["wwwroot"]), info.url);
		
		if (!string.endWith(info.url, "/") && fsys.isDir(fullpath)) {
			response.redirect_301(info.url + "/");
			response.flush();
		}
		elseif (string.endWith(info.url, "/")) {
			// 自动寻找首页，严格按照顺序
			for (i = 1; #webquicker.parser.indexes) {
				if (io.exist(fullpath + webquicker.parser.indexes[i])) {
					info.url += webquicker.parser.indexes[i];
					break;
				}
			}
		}
		
		fullpath = fsys.joinpath(io.fullpath(settings["wwwroot"]), info.url);
		
		// 对于不存在的文件，返回 404 错误
		if (!string.startWith(fullpath, io.fullpath(settings["wwwroot"]))
			|| !io.exist(fullpath) || fsys.isDir(fullpath)) {
			err_404();
		} else {
			var tpath = io.splitpath(info.url);
			if (string.lower(tpath.ext) == ".aau") {
				// 先记录 self 里所有的变量，以便最后释放资源
				for (k, v in self) {
					SELF_TABLE[k] = k;
				}
				// 脚本文件，执行
				loadPage(tpath.dir + tpath.name);
			} else {
				// MIME
				response.header["Content-Type"] = "application/stream";
				for (k, v in webquicker.parser.mime) {
					if (tpath.ext == "." + k) {
						response.header["Content-Type"] = v;
					}
				}
				
				// 打开文件
				var file = fsys.file(fullpath);
				if (file) {
					// 最后修改日期
					var fileTime = file.getFileTimes();
					var t = fileTime.write;
					t.format = "%a, %d %b %Y %H:%M:%S GMT"; // 格式化为 GMT 时间
					
					var tSince;
					if (request.header[["If-Modified-Since"]]) {
						try {
							tSince = time(request.header[["If-Modified-Since"]], "%a, %d %b %Y %H:%M:%S GMT");
							tSince.addhour(8); // GMT +8:00
						} catch (e) {
						
						}
					}
					
					if (tSince && tSince >= t) {
						response.status = "304 Not Modified";
						response.body = "";
					} else {
						t.addhour(-8); // GMT +0:00
						response.header["Last-Modified"] = tostring(t);
						// 发送回复头
						var bytesTotal = file.size();
						var responseHeader = response.makeResponseHeader(bytesTotal);
						wsock.send(hSocket, responseHeader, #responseHeader, 0);
						file.seek("set");
						// 发送文件
						var bytesSent = 0;
						while (bytesSent < bytesTotal) {
							var bytesRead = math.min(bytesTotal - bytesSent, 102400);
							var str = file.read(bytesRead);
							wsock.send(hSocket, str, #str, 0);
							bytesSent += bytesRead;
						}
						file.close();
						
						flag = true;
					}
				}
			}
		}
	}
	
	// 如果非后台脚本文件，则采用一次性发送的形式
	if (!flag && !response.closed) {
		if (#SELF_TABLE) {
			// 释放全局变量
			self["_RELEASE "]();
		}
		
		response.flush();
	}
}

if (!_DEBUG) {
	io.print = function () {
	
	}
	init();
} else {
	io.open();
	startService();
	import key;
	while (!key.getStateX("ESC")) {
		sleep(100);
	}
	io.close();
}