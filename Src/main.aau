// 当前该框架尚处于测试阶段，请勿在实际工程中使用
// http://localhost

// import debug.log;
namespace debug.log {
	write = function () {};
	flush = function () {};
}

import webquicker.service;

var hServiceStatus;
var SERVICE_STATUS = webquicker.service.SERVICE_STATUS();
webquicker.service.MAIN_SERVICE_STATUS = SERVICE_STATUS;

// 初始化
init = function () {
	select _CMDLINE {
		case "-i" {
			// 安装服务
			webquicker.service.install();
		}
		case "-u" {
			// 卸载服务
			webquicker.service.uninstall();
		}
		case "-s" {
			// 启动服务
			var SERVICE_TABLE_ENTRY = {};
			SERVICE_TABLE_ENTRY[1] = webquicker.service.SERVICE_TABLE_ENTRY();
			SERVICE_TABLE_ENTRY[2] = webquicker.service.SERVICE_TABLE_ENTRY();
			
			SERVICE_TABLE_ENTRY[1].lpServiceName = _SERVICE_NAME;
			SERVICE_TABLE_ENTRY[1].lpServiceProc = raw.tostdcall(serviceMain, "(int, string)");
			
			debug.log.write("StartServiceCtrlDispatcher...");
			debug.log.flush();
			webquicker.service.StartServiceCtrlDispatcher(raw.toarray(SERVICE_TABLE_ENTRY));
			debug.log.write("StartServiceCtrlDispatcher...OK!");
			debug.log.flush();
		}
	}
}

// 服务主体
serviceMain = function (dwArgc, lpszArgv) {
	debug.log.write("ServiceMain...");
	debug.log.flush();
	if (startService()) {
		debug.log.write("RegisterServiceCtrlHandler...");
		debug.log.flush();
		hServiceStatus = webquicker.service.RegisterServiceCtrlHandler(_SERVICE_NAME, raw.tostdcall(serviceHandler, "(int)"));
		debug.log.write("RegisterServiceCtrlHandler...OK!");
		debug.log.flush();
		if (!hServiceStatus) {
			SERVICE_STATUS.dwCurrentState = 0x2/*_SERVICE_START_PENDING*/;
		} else {
			SERVICE_STATUS.dwCurrentState = 0x4/*_SERVICE_RUNNING*/;
		}
	} else {
		SERVICE_STATUS.dwCurrentState = 0x2/*_SERVICE_START_PENDING*/;
	}
	
	SERVICE_STATUS.dwServiceType = 0x20/*_SERVICE_WIN32_SHARE_PROCESS*/
	SERVICE_STATUS.dwControlsAccepted = 0x4 | 0x1/*_SERVICE_ACCEPT_SHUTDOWN | _SERVICE_ACCEPT_STOP*/;
	SERVICE_STATUS.dwWin32ExitCode = 0x0/*_NO_ERROR*/;
	
	webquicker.service.SetServiceStatus(hServiceStatus, SERVICE_STATUS);
	debug.log.write("SetServiceStatus");
	debug.log.flush();
}

// 服务 Handler
serviceHandler = function (fdwControl) {
	if (fdwControl == 0x5/*_SERVICE_CONTROL_SHUTDOWN*/ || fdwControl == 0x1/*_SERVICE_CONTROL_STOP*/) {
		SERVICE_STATUS.dwCurrentState = 0x1/*_SERVICE_STOPPED*/;
		webserver.stop();
	}
	webquicker.service.SetServiceStatus(hServiceStatus, SERVICE_STATUS);
}

// 服务函数
startService = function () {
	import webquicker.server;
	webserver = webquicker.server();
	webserver.start(80, accept);
	return true;
}

// 处理函数（在子线程中）
accept = function (hSocket) {
	import fsys.file;
	import webquicker.parser;
	
	var ret = false;
	
	var len, data = wsock.recv(hSocket, 2048, 2048, 0);
	data = string.left(data, len);
	
	var info = webquicker.parser.parseRequest(data);
	response = webquicker.parser.response(hSocket);
	request = info;
	
	// 错误处理
	err_404 = function () {
		response.status = "404 File Not Found";
		response.body = "<html><head><title>File Not Found</title></head><body><h1>404 File Not Found</h1>";
		response.body += "</body></html>";
	}
	
	err_500 = function (msg) {
		response.status = "500 Internal Server Error";
		response.body = "<html><head><title>Script Error</title></head><body><h1>Script Error</h1>";
		response.body += "<hr/><p><strong>Message: </strong>" + msg + "</p></body></html>";
	}
	
	// 执行 aau
	loadPage = function (path) {
		if (!io.exist("/pages" + path + ".aau")) {
			err_404();
		} else {
			loadcode("/res/standard.aau")("/pages" + path + ".aau");
			var SetCurrentDirectory = ::Kernel32.api("SetCurrentDirectory", "int(string)");
			SetCurrentDirectory(io.fullpath("/pages/"));
			var func, err = loadcode("/pages/" + path + ".aau");
			if (func) {
				func(info, response);
			} else {
				err_500(err or "Unknown");
			}
		}
	}
	
	var flag = false;
	
	if (info.requireRedirect) {
		response.redirect(info.url);
	} else {
		// 自动寻找首页	
		if (string.endWith(info.url, "/")) {
			// 严格按照顺序
			for (i = 1; #webquicker.parser.indexes) {
				if (io.exist(io.fullpath("/pages" + info.url + webquicker.parser.indexes[i]))) {
					info.url += webquicker.parser.indexes[i];
					break;
				}
			}
		}
		
		// 防止 ../ 读取到 Web 根目录以外的文件
		if (!string.startWith(io.fullpath("/pages" + info.url), io.fullpath("/pages/"))) {
			err_404();
		} else {
			var tpath = io.splitpath(info.url);
			if (string.lower(tpath.ext) == ".aau") {
				// 脚本文件，执行
				try {
					loadPage(tpath.dir + tpath.name);
				} catch (e) {
					err_500(e or "Unknown");
				}
			} else {
				// MIME
				response.header["Content-Type"] = "application/stream";
				for (k, v in webquicker.parser.mime) {
					if (tpath.ext == "." + k) {
						response.header["Content-Type"] = v;
					}
				}
				
				// 打开文件
				var file = fsys.file("/pages/" + info.url);
				if (file) {
					// 最后修改日期
					var fileTime = file.getFileTimes();
					var t = fileTime.write;
					t.format = "%a, %d %b %Y %H:%M:%S GMT"; // 格式化为 GMT 时间
					
					var tSince;
					if (request.header[["If-Modified-Since"]]) {
						try {
							tSince = time(request.header[["If-Modified-Since"]], "%a, %d %b %Y %H:%M:%S GMT");
							tSince.addhour(8); // GMT +8:00
						} catch (e) {
						
						}
					}
					
					if (tSince && tSince >= t) {
						response.status = "304 Not Modified";
						response.body = "";
					} else {
						t.addhour(-8); // GMT +0:00
						response.header["Last-Modified"] = tostring(t);
						
						// 发送回复头
						var bytesTotal = file.size;
						var responseHeader = response.makeResponseHeader(bytesTotal);
						wsock.send(hSocket, responseHeader, #responseHeader, 0);
						file.seek("set");
						// 发送文件
						var bytesSent = 0;
						while (bytesSent < bytesTotal) {
							var bytesRead = math.min(bytesTotal - bytesSent, 102400);
							var str = file.read(bytesRead);
							wsock.send(hSocket, str, #str, 0);
							bytesSent += bytesRead;
						}
						file.close();
						
						flag = true;
					}
				} else {
					if (!string.endWith(info.url, "/") && io.exist("/pages/" + info.url + "/")) {
						response.redirect(info.url + "/");
					} else {
						err_404();
					}
				}
			}
		}
	}
		
	// 如果非后台脚本文件，则采用一次性发送的形式
	if (!flag) {
		response.flush();
	}
	
	return ret;
}

init();