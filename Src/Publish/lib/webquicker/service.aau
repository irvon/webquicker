namespace webquicker.service;

_SERVICE_NAME = "WebQuicker";

Advapi32 = ..raw.loadDll("Advapi32.dll");
OpenSCManager = Advapi32.api("OpenSCManagerA", "pointer(string lpMachineName, string lpDatabaseName, INT dwDesiredAccess)");
CloseServiceHandle = Advapi32.api("CloseServiceHandle", "int(pointer hSCObject)");
CreateService = Advapi32.api("CreateServiceA", "pointer(pointer hSCManager, string lpServiceName, string lpDisplayName, INT dwDesiredAccess, INT dwServiceType, INT dwStartType, INT dwErrorControl, string lpBinaryPathName, string lpLoadOrderGroup, INT lpdwTagId, string lpDependencies, string lpServiceStartName, string lpPassword)");
StartService = Advapi32.api("StartServiceA", "int(pointer hService, INT dwNumServiceArgs, string lpServiceArgVectors)");
OpenService = Advapi32.api("OpenServiceA", "pointer(pointer hSCManager, string lpServiceName, INT dwDesiredAccess)");
ControlService = Advapi32.api("ControlService", "int(pointer hService, INT dwControl, struct& lpServiceStatus)");
DeleteService = Advapi32.api("DeleteService", "int(pointer hService)");
RegisterServiceCtrlHandler = Advapi32.api("RegisterServiceCtrlHandlerA", "pointer(string lpServiceName, pointer lpHandlerProc)");
SetServiceStatus = Advapi32.api("SetServiceStatus","int(pointer hServiceStatus, struct lpServiceStatus)");
StartServiceCtrlDispatcher = Advapi32.api("StartServiceCtrlDispatcherA", "int(struct[] lpServiceTable)");

SERVICE_STATUS = class {
	INT dwServiceType;
	INT dwCurrentState;
	INT dwControlsAccepted;
	INT dwWin32ExitCode;
	INT dwServiceSpecificExitCode;
	INT dwCheckPoint;
	INT dwWaitHint;
}

SERVICE_TABLE_ENTRY = class {
	string lpServiceName;
	pointer lpServiceProc;
}

install = function () {
	..io.print("Installing Service...");
	var hSCManager = OpenSCManager(, , 0x2/*_SC_MANAGER_CREATE_SERVICE*/);
	if (hSCManager) {
		var hService = CreateService(
			hSCManager,
			_SERVICE_NAME, _SERVICE_NAME,
			0x10/*_SERVICE_START*/, 0x10/*_SERVICE_WIN32_OWN_PROCESS*/, 0x2/*_SERVICE_AUTO_START*/, 0x0/*_SERVICE_ERROR_IGNORE*/,
			..io._exepath + " -s", , 0
		);
		if (hService) {
			StartService(hService, 0);
			CloseServiceHandle(hService);
			..io.print("Installed successfully!");
		} else {
			..io.print("Error: CreateService Failed!");
		}
		CloseServiceHandle(hSCManager);
	} else {
		..io.print("Error: OpenSCManager Failed!");
	}
}

uninstall = function () {
	..io.print("Uninstalling Service...");
	var hSCManager = OpenSCManager(, , 0x2/*_SC_MANAGER_CREATE_SERVICE*/);
	if (hSCManager) {
		var hService = OpenService(hSCManager, _SERVICE_NAME, 0x10000/*_DELETE*/ | 0x20/*_SERVICE_STOP*/);
		if (hService) {
			ControlService(hService, 0x1/*_SERVICE_CONTROL_STOP*/, MAIN_SERVICE_STATUS);
			DeleteService(hService);
			CloseServiceHandle(hService);
		} else {
			..io.print("Error: OpenService Failed!");
		}
		CloseServiceHandle(hSCManager);
	} else {
		..io.print("Error: OpenSCManager Failed!");
	}
}