//zlib库源代码
namespace zlib {
	var dll = ..raw.loadDll($"/.res/zlib1.dll");
	var zlib_compress = dll.api("compress","int(string& dest, LONG& destLen, string source, LONG sourceLen)" ,"cdcel");
	var zlib_compressBound = dll.api("compressBound","LONG(LONG sourceLen)" ,"cdcel");
	var zlib_uncompress = dll.api("uncompress","int(string& dest, LONG& destLen, string source, LONG sourceLen)" ,"cdcel");
	
	compressBound = zlib_compressBound;
	compress = function (source, orginal = false) {
		if (type(source) != type.string || !source) {
			error("请提供想要被压缩的数据!", 2);
		}
		var sourceLen = #source;
		var destLen = compressBound(sourceLen);
		var re, dest, destLen = zlib_compress(destLen, destLen, source, sourceLen);
		dest = ..string.left(dest, destLen);
		if (!orginal) {
			dest = tostring(..raw.convert({ int n = sourceLen }, { byte str[4] }).str) + dest;
		}
		return dest;
	}
	uncompress = function (source, destLen) {
		if (type(source) != type.string || !source) {
			error("请提供想要被解压缩的数据!", 2);
		}
		var sourceLen = #source;
		if (!destLen) {
			destLen = ..raw.convert(..string.left(source, 4), { int n }).n;
			source = ..string.right(source, sourceLen - 4);
		}
		var re, dest = zlib_uncompress(destLen, destLen, source, sourceLen);
		return dest;
	}
}

/**intellisense()
zlib = zlib库
zlib.compressBound(.(源数据大小) = 提供源数据大小，计算压缩需要的缓冲区长度
zlib.compress(.(源数据,是否返回原始数据) = 使用zlib压缩数据，返回压缩后的结果\n源数据：将被压缩的数据\n是否返回原始数据：默认为 false，若返回原始数据，则解压缩时需要提供第二个参数
zlib.uncompress(.(源数据,解压后大小) = 使用zlib解压缩数据，返回解压缩后的结果\n源数据：将被解压缩的数据\n解压后大小：若压缩时指定了返回原始数据，则需要填写这个参数，否则无需填写
end intellisense**/