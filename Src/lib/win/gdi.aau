import win;
namespace win.gdi


/*intellisense(win.gdi)*/ 
setfont = function(hwnd,font){ 
   if(type(font)== type.table ) {
   var  hFont = ::CreateFontIndirect( font); 
   assert(hFont,"创建字体失败!")
   ::SendMessage(hwnd,0x30/*_WM_SETFONT*/,topointer( hFont ) ,null);
   }
} 

RGBQUAD= class{ 
BYTE rgbBlue; 
BYTE rgbGreen; 
BYTE rgbRed; 
BYTE rgbReserved; 
}
   
RGB = function(r,g,b){ 
    //根据rgb值返回颜色数值
	var rgb = RGBQUAD();
	rgb.rgbRed = b;
	rgb.rgbGreen = g;
	rgb.rgbBlue = r;

    var colorref = {INT color}  
    ..raw.convert( rgb,colorref );

    return colorref.color;
}
/*end intellisense*/

/*intellisense()
RGBQUAD = @win.gdi.RGBQUAD;
RGB = @win.gdi.RGB( 0__,0,0)
end intellisense*/



 /*intellisense(::)*/ 
 ::Gdi32 := ..raw.loadDll("Gdi32.dll")
 
::LOGFONT = class{ 
	ctor(arg){
		for(k,v in arg){
 			this[k] = v;
		}
		//如果用户未设置的属性，设置为默认值
		this.name  := "MS Shell Dlg"; 
		this.h:= -11;
		this.weight := 400;
		this.charset:= 134;
		for(k,v in arg){
 			this[k] := 0;
		}
	}  
	
	int      h;//以逻辑单位指定字体字符元(character cell)或字符的高度
	int      w;//以逻辑单位指定字体字符的平均宽度
	int      esc;//以十分之一度为单位指定每一行文本输出时相对于页面底端的角度
	int      ori;//以十分之一度为单位指定字符基线相对于页面底端的角度
	int      weight;//指定字体重量
	BYTE      italic;//当lfItalic为TRUE时使用斜体
	BYTE      underline;//当lfUnderline为TRUE时给字体添加下划线
	BYTE      strike;//当lfStrikeOut为TRUE时给字体添加删除线
	BYTE      charset;//指定字符集
	BYTE      out;//指定输出精度
	BYTE      clip;//指定剪辑精度
	BYTE      quality;//定义输出质量
	BYTE      family;//指定字体的字符间距和族
	BYTE      name[32] ;
	//请参考： http://baike.baidu.com/view/2421591.htm?fr=ala0_1_1
 	
}

::SelectObject  =  Gdi32.api("SelectObject","pointer(POINTER hdc,pointer hObject)");
::DeleteObject  =  Gdi32.api("DeleteObject", "int(pointer hObject)");
::GetCurrentObject  =  Gdi32.api("GetCurrentObject","int(pointer hdc,int uObjectType)");
::GetWindowDC  =  ::User32.api("GetWindowDC","pointer(int hwnd)" ) 
::DeleteDC  =  Gdi32.api("DeleteDC","pointer(pointer hdc)");
::ReleaseDC  =  ::User32.api("ReleaseDC","pointer(int hwnd,pointer hdc)");
::GetDC  =  ::User32.api("GetDC","pointer(int hwnd)");
::CreateFontIndirect = Gdi32.api("CreateFontIndirectA","int(struct lplf)" )
::GetStockObject  =  Gdi32.api("GetStockObject","pointer(int i)" )
::CreatePatternBrush  =  Gdi32.api("CreatePatternBrush","pointer(pointer hbm)" ) 
::PatBlt  =  Gdi32.api("PatBlt","int(  POINTER hDc,  int x,  int y,  int cx,  int cy,  INT rop)" ) 
::AbortPath  =  Gdi32.api("AbortPath","int(pointer hdc)");
::BeginPath  =  Gdi32.api("BeginPath","int(pointer hdc)");
::BitBlt  =  Gdi32.api("BitBlt","int(pointer hDestDC,int x,int y,int nWidth,int nHeight,pointer hSrcDC,int xSrc,int ySrc,int dwRop)");
::EndPath  =  Gdi32.api("EndPath","int(pointer hdc)");
::CreatePen  =  Gdi32.api("CreatePen", "pointer(int nPenStyle,int nWidth,int crColor)");
::CreateSolidBrush  =  Gdi32.api("CreateSolidBrush","pointer(int crColor)");
::CreateHatchBrush  =  Gdi32.api("CreateHatchBrush","pointer(int nIndex,int crColor)");
::CreateFont  =  Gdi32.api("CreateFontA","pointer(int H,int W,int E,int O,int W,bool I,bool u,int S,int C,int OP,int CP,int Q,int PAF,string F)");
::CreateCompatibleDC  =  Gdi32.api("CreateCompatibleDC","pointer(pointer hdc)");
::CreateCompatibleBitmap  =  Gdi32.api("CreateCompatibleBitmap","pointer(pointer hdc,int nWidth,int nHeight)");
::CreateBitmap = Gdi32.api("CreateBitmap","pointer(int nWidth,int nHeight,int nPlanes,int nBitCount,pointer& lpBits)");
::MoveToEx  =  Gdi32.api("MoveToEx","int(pointer hdc,int x,int y,struct& lpPoint)");
::LineTo  =  Gdi32.api("LineTo","int(pointer hdc,int x,int y)");
::DrawEdge  =  ::User32.api("DrawEdge","int(pointer hdc,struct qrc,int edge,int grfFlags)");
::DrawFocusRect  =  ::User32.api("DrawFocusRect","int(pointer hdc,struct lpRect)");
::DrawFrameControl  =  ::User32.api("DrawFrameControl","int(pointer hDC,struct lpRect,int un1,int un2)");
::Ellipse  =  Gdi32.api("Ellipse","int(pointer hdc,int X1,int Y1,int X2,int Y2)");
::CancelDC  =  Gdi32.api("CancelDC","int(pointer hdc)");
::AngleArc  =  Gdi32.api("AngleArc","int(pointer hdc,int x,int y,int dwRadius,float eStartAngle,float eSweepAngle)");
::Arc  =  Gdi32.api("Arc","int(pointer hdc,int X1,int Y1,int X2,int Y2,int X3,int Y3,int X4,int Y4)");
::ArcTo  =  Gdi32.api("ArcTo","int(pointer hdc,int X1,int Y1,int X2,int Y2,int X3,int Y3,int X4,int Y4)");
::FillPath  =  Gdi32.api("FillPath","int(pointer hdc)");
::FillRect  =  ::User32.api("FillRect","int(pointer hdc,struct& lpRect,pointer hBrush)");
::FrameRect  =  ::User32.api("FrameRect","int(pointer hdc,struct& lpRect,pointer hBrush)");
::GetBkColor  =  Gdi32.api("GetBkColor","int(pointer hdc)");
::SetBkColor  =  Gdi32.api("SetBkColor","int(pointer hdc, int color)");
::GetTextColor  =  Gdi32.api("GetTextColor","int(pointer hdc)");
::SetTextColor  =  Gdi32.api("SetTextColor","int(pointer hdc,int crColor)");
::GetBkMode  =  Gdi32.api("GetBkMode","int(pointer hdc)");
::SetBkMode  =  Gdi32.api("SetBkMode","int(pointer hdc, int mode)");
::TextOut  =  Gdi32.api("TextOutA","int(pointer hdc,int x,int y,string lpString,int nCount)");
::SelectClipPath  =  Gdi32.api("SelectClipPath","int(pointer hdc,int iMode)");
::BeginPaint  =  ::User32.api("BeginPaint", "pointer(int hWnd, struct &lpPaint)");
::EndPaint  =  ::User32.api("EndPaint", "int(int hWnd, struct lpPaint)");
::GdiGradientFill  =  Gdi32.api("GdiGradientFill", "int(pointer hdc, struct [] pVertex, int, struct, int, int)");
::PrintWindow  =  ::User32.api("PrintWindow", "int(int hwnd, pointer hdcBlt, int nFlags)");
::GetPixel  =  Gdi32.api("GetPixel","int(pointer hdc,int x,int y)");
::SetPixel  =  Gdi32.api("SetPixel","int(pointer hdc,int x,int y,int crColor)");
::RoundRect  =  Gdi32.api("RoundRect","int(pointer hdc,int X1,int Y1,int X2,int Y2,int X3,int Y3)");
::DrawText  =  ::User32.api("DrawTextA","int(pointer hdc,string lpStr,int nCount,struct& lpRect,int wFormat)");
::GetStretchBltMode = Gdi32.api("GetStretchBltMode","int(pointer hdc)");
::SetStretchBltMode = Gdi32.api("SetStretchBltMode","int(pointer hdc,int nStretchMode)");
::StretchBlt = Gdi32.api("StretchBlt","int(pointer hdc,int x,int y,int nWidth,int nHeight,pointer hSrcDC,int xSrc,int ySrc,int nSrcWidth,int nSrcHeight,int dwRop)");
::TransparentBlt = Gdi32.api("GdiTransparentBlt","int(pointer hdcDest,int xoriginDest,int yoriginDest,int wDest,int hDest,pointer hdcSrc,int xoriginSrc,int yoriginSrc,int wSrc,int hSrc,INT crTransparent)");
/*end intellisense*/ 

/*intellisense(win.gdi)*/
getPixel = function(x,y,hwnd = 0 ){ 
    //抓点
    var hdc = GetDC(hwnd); 
    if(hdc){
       var pix = GetPixel(hdc,x,y);
      
       ::ReleaseDC(hwnd,hdc); 
       return pix; 
    }
}
setPixel = function(x,y,color,hwnd = 0 ){ 
    //抓点
    var hdc = GetDC(hwnd); 
    if(hdc){
       var pix = SetPixel(hdc,x,y,color);
      
       ::ReleaseDC(hwnd,hdc); 
       return pix; 
    }
}
/*end intellisense*/

 /**intellisense()
_SRCCOPY=@0xCC0020/*_SRCCOPY*/
_SRCPAINT=@0xEE0086/*_SRCPAINT*/
_SRCAND=@0x8800C6/*_SRCAND*/
_SRCINVERT=@0x660046/*_SRCINVERT*/
_SRCERASE=@0x440328/*_SRCERASE*/
_NOTSRCCOPY=@0x330008/*_NOTSRCCOPY*/
_NOTSRCERASE=@0x1100A6/*_NOTSRCERASE*/
_MERGECOPY=@0xC000CA/*_MERGECOPY*/
_MERGEPAINT=@0xBB0226/*_MERGEPAINT*/
_PATCOPY=@0xF00021/*_PATCOPY*/
_PATPAINT=@0xFB0A09/*_PATPAINT*/
_PATINVERT=@0x5A0049/*_PATINVERT*/
_DSTINVERT=@0x550009/*_DSTINVERT*/
_BLACKNESS=@0x42/*_BLACKNESS*/
_WHITENESS=@0xFF0062/*_WHITENESS*/
_STRETCH_ANDSCANS=@0x1/*_STRETCH_ANDSCANS*/
_STRETCH_ORSCANS=@0x2/*_STRETCH_ORSCANS*/
_STRETCH_DELETESCANS=@0x3/*_STRETCH_DELETESCANS*/
_STRETCH_HALFTONE=@0x4/*_STRETCH_HALFTONE*/
end intellisense**/