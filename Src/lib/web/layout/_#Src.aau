//默认库源代码

/* 
Author: crane he, lujjjh   
About HTMLayout: http://terrainformatica.com
*/ 

import fsys
import win.ui;
import fsys.codepage; 
import web;
import util.metaProperty;

namespace web;
var raw_convert = ..raw.convert;

layout = class {
	ctor (winform,handleEvents=0x80000100/*_HL_HANDLE_LITE*/) { 
		if( winform.className == "static" ){
			winform.modifyStyle(,0x100/*_SS_NOTIFY*/ | 0x2000000/*_WS_CLIPCHILDREN*/); 
		} 
		else{
			winform.modifyStyle(,0x2000000/*_WS_CLIPCHILDREN*/)
		};
		
		winform.layout = this;
		this.hwnd = winform[["hwnd"]];
		this._form = winform;
		   
		ProcND(this.hwnd, 0x1/*_WM_CREATE*/, 0, 0);
		SetOption( this.hwnd, 5/*_HL_OPTIONS_ANIMATION_THREAD*/,1) ; 
		 
		winform.tailWndproc = function (hwnd, message, wParam, lParam) {
			var re, handled = ProcND(hwnd, message, wParam, lParam);
			if( message == 0x5/*_WM_SIZE*/ ){ 
				for(k,ctrl in this._contrls){  
					if(ctrl.adjust) {
						var x,y,cx,cy = ctrl.getPos();
						ctrl.adjust(cx,cy); 
					};
				}
				return;//调整其他不属于HTMLayout的子窗口
			}
			elseif( message == 0x2/*_WM_DESTROY*/ ){
				WindowDetachEventHandler(this.hwnd,this._domEventsHandler_c);
				SetCallback(this.hwnd,null);
				winform.wndproc = null;
				return;//默认析构
			}
			
			if( handled ) 
				return re; 
		};
		
		winform.onEraseBkgnd = null; 
		if( winform.isDialogMessage ){
			if( winform.isDialogMessage!= ..win.isDialogMessage ){
				error("在创建web.layout窗体以前,禁止重写默认 isDialogMessage() 函数 ",2)
			}
			else{
				winform.isDialogMessage = function(hwnd,msg) {
					return false; 
				}
			}
		};
		
		this._callback_c = ..raw.tostdcall( _callback, "bool(INT uMsg,INT wParam,int lParam,pointer vPara)",this);
		SetCallback(this.hwnd, this._callback_c);
 
 		this._domEventsHandler_c = ..raw.tostdcall( event._handler, "bool(pointer tag,pointer he,INT evtg,pointer prms)",this); 
		WindowAttachEventHandler(this.hwnd, this._domEventsHandler_c, , handleEvents ); 
		
		this._contrls = {}; //自定义窗口控件 
	} 
	@_metaProperty;
}

namespace layout {
	dll = ..raw.loadDll($"/.res/HTMLayout.dll","HTMLayout.dll"); 
	namespace ..global{ 
		import web.layout.valueObject;
		import web.layout.element;
		import web.layout.event;  
	}
	behavior = {};
	
 	var ctrlClasses = ..win.ui.ctrl;
 	var conflictCustomControls ={ button=1; checkbox=1; calendar=1 };  
 	var getAttributeByName = element.GetAttributeByName;
 	var fromUnicode = ..string.fromUnicode;
 	var toUnicode = ..string.toUnicode;
 	var loadText = ..fsys.codepage.load;
 	var loadBinary = ..string.load;
 	var joinpath = ..fsys.joinpath
 	
	_defaultNotifyHandler ={
		[ 0xB01/*_HLN_LOAD_DATA*/ ]  = function(this,message, wParam, lParam, vParam,notifyCode, pNmhdr){ 
		
			var nmld = NMHL_LOAD_DATA();  
			raw_convert(pNmhdr, nmld);
			var uri = fromUnicode(nmld.uri,0,true);  
			if( ..string.match( uri,"^\a+\://" ) ){
				return 0/*_LOAD_OK*/;
			}
			 
			if ( #this.localBaseDir )
				uri = joinpath(this.localBaseDir,uri) 
			
			var data;
			if(  nmld.dataType % 2 != 0 ){
				data = loadBinary(uri);
			}
			else{ 
				data = loadText(uri,this.charset);
			}
			
			if (data) {
				DataReady(this.hwnd, uri, data, #data);
			}
			return 0/*_LOAD_OK*/;
		 
		}
		[0xB04/*_HLN_DOCUMENT_COMPLETE*/]  = function(this,message, wParam, lParam, vParam,notifyCode, pNmhdr){  
		
			if(this.onDocumentComplete){
				this.onDocumentComplete();
			}
 			return 0;
		}
		[ 0xB00/*_HLN_CREATE_CONTROL*/ ]  = function(this,message, wParam, lParam, vParam,notifyCode, pNmhdr){
			var nmld = NMHL_CREATE_CONTROL();
			raw_convert(pNmhdr, nmld);  
			var re,cType = getAttributeByName(nmld.helement,"cls")
			if(!cType)return 0;
			
			cType = fromUnicode(cType,0,true) 
			if( conflictCustomControls[cType] ) return 0;
			if( !ctrlClasses[cType] ){
				return 0;
			}
			
			var re,cId = getAttributeByName(nmld.helement,"id") 
			if(!cId)return 0;
			
			cId = fromUnicode(cId,0,true);
			
			if( !this._form[cId] ){
				this._form.addCtrl( [cId] = { bottom=1;right=1;left=0;top=0;cls=cType;text="";autoResize=false} );   
			} 
			
			if(this._form[cId]){
				this._form[cId].autoResize = false;
				nmld.outControlHwnd = this._form[cId].hwnd;  
 				CopyMemoryByStruct(pNmhdr, nmld, ..raw.sizeof(nmld));
 				this._contrls[cId]=this._form[cId]; 
 			} 
 			return 0;
		}
		[0xB02/*_HLN_CONTROL_CREATED*/] = function(this,message, wParam, lParam, vParam,notifyCode, pNmhdr){ 
			if( this.onControlCreate ){
				var nmld = NMHL_CREATE_CONTROL();
				raw_convert(pNmhdr, nmld);
				var re,cId = getAttributeByName(nmld.helement,"id")
				if(!cId)return 0; 
			
				this.onControlCreate(element(nmld.helement),fromUnicode(cId,0,true),nmld.outControlHwnd)
 			}
 			return 0;
		}
		[0xB06/*_HLN_DESTROY_CONTROL*/] = function(this,message, wParam, lParam, vParam,notifyCode, pNmhdr){
			var nmld = NMHL_CREATE_CONTROL();
			raw_convert(pNmhdr, nmld);
			var re,cId = getAttributeByName(nmld.helement,"id") 
			if(!cId)return 0; 
			
			cId = fromUnicode(cId,0,true);
			if( this._form[cId]){
				this._form[cId].close();
				this._contrls[cId]=null;
			}
 			return 0;
		} 
		[0xB07/*_HLN_ATTACH_BEHAVIOR*/] = function(this,message, wParam, lParam, vParam,notifyCode, pNmhdr){
			var nmld = NMHL_ATTACH_BEHAVIOR();
			raw_convert(pNmhdr, nmld);
			var name = ..raw.str( nmld.behaviorName );
			var behavior = ..web.layout.behavior[name];
			if( type(behavior) == "table" ){
				if( !behavior._domEventsHandler_c ){
					if(!behavior.__event_subsriptions )
						behavior.__event_subsriptions = event.getSubscriptions(behavior) | 0x200/*_HL_HANDLE_METHOD_CALL*/;
						
					behavior._domEventsHandler_c  =  ..raw.tostdcall( event._handler, "int(pointer tag,pointer he,INT evtg,pointer prms)",behavior ); 
				}
				
				..raw.mixin( pNmhdr,nmld,{
					elementProc =  behavior._domEventsHandler_c;
					elementEvents = behavior.__event_subsriptions;
				} );
			}
 			return 0;
		}
	};     
	
	var NMHDR  = ..win.ui.NMHDR; 
	_callback = function (message, wParam, lParam, vParam) {
		var pNmhdr = topointer( lParam );
		var nmhdr = raw_convert( pNmhdr, NMHDR() );
		var notifyCode = nmhdr.code;  
		if ( owner.callback ) {
			var re = owner.callback(message, wParam, lParam, vParam,notifyCode, pNmhdr);
			if (re !== null) return re;
		} 
		
		var handler = _defaultNotifyHandler[notifyCode]
		if( handler ){
			var result = handler(owner,message, wParam, lParam, vParam,notifyCode, pNmhdr)
			if( result !== null )
				return result;
		}	 
		return 0;
	};
	 
	var _cache_elements = element._cache_elements;
	_metaProperty = ..util.metaProperty(
		go = function (filename,charset) {
			if ( ..io.localpath(filename) || filename[1] == '~'# ) {
				owner.charset =  charset;
				owner.localBaseDir = ..io.splitpath(filename).dir; 
				return owner.write( ( loadText(filename,charset) ) ) ,owner.localBaseDir );
			}
			else {
				return LoadFile(owner.hwnd,toUnicode( filename ) );
			}
		}
		write = function (data, baseUrl) {
			data = toUnicode(data);
			if ( baseUrl )
				return LoadHtmlEx( owner.hwnd, data, #data - 2, baseUrl );
			else
				return LoadHtml( owner.hwnd, data, #data - 2 ); 
				
		};
		createEle = function (tag, text) {
			if(text)text=..string.toUnicode(text);
			var re, he = CreateElement(tag, text);
			if( re == 0/*_HLDOM_OK*/) {
				return element(he,false);
			}
		};
		fromPoint = function(x=0,y=0,screen ){
			if(screen)
				x,y = ..win.toClient( owner.hwnd,x,y );
				
			var ret,he = FindElement( owner.hwnd,x,y )
			if( re = 0/*_HLDOM_OK*/ && he )
				return element(he,true);
		}; 
		documentElement = {
			_get = function () {
				var re, he = GetRootElement( owner.hwnd );
				return he ? ( _cache_elements[he] or element(he) );
			}
		};
		getEle = function (id) {
			return owner.documentElement.getElementById(id) ;
		};
		getEleByUid = function (uid=0) {
			var re,he = GetElementByUID(owner.hwnd,uid) ;
			if( re == 0/*_HLDOM_OK*/ )
				return element(he)
		};
		getFocus = function() {
			var re,he = GetFocusElement(owner.hwnd) ;
			if( re == 0/*_HLDOM_OK*/ )
				return element(he)
		};
		getEles = function (name) {
			return owner.documentElement.getElementsByName(name);
		}; 
		 
		getElesByTag = function (tag) {
			return owner.documentElement.getElementsByTagName(tag);
		};
		
		queryEles = function (...) {
			return owner.documentElement.queryElements(...);
		};
		
		queryEle = function (...) {
			return owner.documentElement.queryElement(...);
		};
		setCss = function(css,mediaType = "screen" ,baseUrl ){
			if(!owner.documentElement ) 
				error("无效的文档对象",2);
			 css  = ..string.fromto(css,0,65001); 
			 return SetCSS(owner.hwnd,css,#css,baseUrl,mediaType)
		}; 
		setMasterCss = function(css){
			css  = ..string.fromto(css,0,65001);
			SetMasterCSS(css,#css);
		};
		appendMasterCss = function(css){
			css  = ..string.fromto(css,0,65001);
			AppendMasterCSS(css,#css);
		};
		updateWindow = function(){
			HTMLayoutUpdateWindow(owner.hwnd);
		}; 
		setMode = function(mode){
			SetMode(owner.hwnd,mode)
		};
		setOption = function(option,value=1){
			return SetOption(owner.hwnd,option,value)
		}; 
		attachEventHandler = function( handler,subscription ){ 
			if( type(handler) != type.table ){
				error("请指定监听对象",2) 
			} 
			if( !subscription)
				subscription = handler.__event_subsriptions
			if( !subscription ){
				subscription = event.getSubscriptions(handler);
			}
			
			var tagId = event._handlerByTagRegistry.reg(handler);
			var ret = WindowAttachEventHandler(owner.handle, event._handlerByTagId_c,tagId,subscription );  
			
			if( ret == 0/*_HLDOM_OK*/){ 
				return tagId;
			}
			else {
				event._handlerByTagRegistry.unReg(tagId);
			}
		};
		detachEventHandler = function(tagId){
			if(!tagId){
				error("请指定事件ID",2)
			}
			 
			return ( 0/*_HLDOM_OK*/ == WindowDetachEventHandler(owner.handle, event._handlerByTagId_c
				,event._handlerByTagRegistry.unReg(tagId) ) );
		};
	); 
	
	with _metaProperty{
		css = { _set = setCss };
		masterCss = { _set = setMasterCss }; 
		html =  { _set = write };
		$ = queryEles;
		$1 = queryEle;
	}
	 
	var nmhdr = ..win.ui.NMHDR;
	
	NMHL_CREATE_CONTROL = class {
		struct hdr = nmhdr();
		pointer helement;
		int inHwndParent;
		int outControlHwnd;
	}
	
	NMHL_DESTROY_CONTROL = class {
		struct hdr = nmhdr();
		pointer helement;
		int inoutControlHwnd;
	}
	
	NMHL_LOAD_DATA = class {
		struct hdr = nmhdr();
		pointer uri;
		pointer outData;
		INT outDataSize;
		INT dataType; //_HLRT_DATA_......
		int principal;
		int initiator;
	}
	
	NMHL_DATA_LOADED = class {
		struct hdr = nmhdr();
		string uri;
		pointer outData;
		INT outDataSize;
		INT dataType;//_HLRT_DATA_......
		INT status;
	}
	
	NMHL_ATTACH_BEHAVIOR = class {
		struct hdr = nmhdr();
		pointer element;
		pointer behaviorName;
		pointer elementProc;
		pointer elementTag;
		INT elementEvents;
	}
	
	NMHL_DIALOG_CLOSE_RQ = class {
		struct hdr = nmhdr();
		bool outCancel;
	}  
	 
	SetOption = dll.api("HTMLayoutSetOption", "bool(int hWnd, INT option, INT value)"); 
	ClipboardCopy = dll.api("HTMLayoutClipboardCopy", "int(int hWnd)");
	DataReady = dll.api("HTMLayoutDataReady", "int(int hwnd, pointer uri, pointer data, INT dataLength)");
	DataReadyAsync = dll.api("HTMLayoutDataReadyAsync", "int(int hwnd, pointer uri, pointer data, INT dataLength, INT dataType)");
	Dialog = dll.api("HTMLayoutDialog", "int(int hWndParent, struct position, INT alignment, INT style, INT styleEx, pointer notificationCallback, pointer eventsCallback, pointer callbackParam, pointer html, INT htmlLength)");
	EnumResources = dll.api("HTMLayoutEnumResources", "INT(int hWnd, pointer cb)");
	GetMinHeight = dll.api("HTMLayoutGetMinHeight", "INT(int hWnd, INT width)");
	GetMinWidth = dll.api("HTMLayoutGetMinWidth", "INT(int hWnd)");
	GetSelectedHTML = dll.api("HTMLayoutGetSelectedHTML", "string(int hWnd, INT& pSize)");
	LoadFile = dll.api("HTMLayoutLoadFile", "int(int hWnd, pointer filename)");
	LoadHtml = dll.api("HTMLayoutLoadHtml", "int(int hWnd, pointer html, INT htmlSize)");
	LoadHtmlEx = dll.api("HTMLayoutLoadHtmlEx", "int(int hWnd, pointer html, INT htmlSize, pointer baseUrl)");
	Proc = dll.api("HTMLayoutProc", "INT(int hwnd, INT msg,INT wParam, int lParam)");
	ProcND = dll.api("HTMLayoutProcND", "INT(int hwnd, INT msg,INT wParam, int lParam, bool& pbHandled)");
	HTMLayoutUpdateWindow = dll.api("HTMLayoutUpdateWindow", "INT(int hwnd)"); 
	Render = dll.api("HTMLayoutRender", "int(int hWnd, pointer hBmp, struct area)");
	SelectionExist = dll.api("HTMLayoutSelectionExist", "int(int hWnd)");
	SetCallback = dll.api("HTMLayoutSetCallback", "void(int hWnd, pointer cb, pointer cbParam)");
	
	SetHttpHeaders = dll.api("HTMLayoutSetHttpHeaders", "bool(int hWnd, pointer htmlHeaders, INT httpHeadersLength)");
	
	SetMediaType = dll.api("HTMLayoutSetMediaType", "bool(int hWnd, pointer mediaType)");
	SetMode = dll.api("HTMLayoutSetMode", "void(int hWnd, int mode)");  
	GetRootElement = dll.api("HTMLayoutGetRootElement", "int(int hwnd, pointer& phe)");
	GetFocusElement = dll.api("HTMLayoutGetFocusElement", "int(int hwnd, pointer& phe)");
	FindElement = dll.api("HTMLayoutFindElement", "int(int hwnd, int x,int y, pointer& phe)");
	GetElementByUID = dll.api("HTMLayoutGetElementByUID", "int(int hwnd, INT uid, pointer& phe)"); 

	SetCSS = dll.api("HTMLayoutSetCSS", "bool(int hWnd, str utf8, INT numBytes, string baseUrl, string mediaType)");
	SetMasterCSS = dll.api("HTMLayoutSetMasterCSS", "bool(str utf8, INT numBytes)");
	AppendMasterCSS = dll.api("HTMLayoutAppendMasterCSS", "bool(str utf8 ,INT numBytes)");
	
	CreateElement = dll.api("HTMLayoutCreateElement", "int(pointer tagname, pointer textOrNull, pointer& phe)");  
	WindowAttachEventHandler = dll.api("HTMLayoutWindowAttachEventHandler", "int(int hwndLayout, pointer pep, pointer tag, INT subscription)");
	WindowDetachEventHandler = dll.api("HTMLayoutWindowDetachEventHandler", "int(int hwndLayout, pointer pep, pointer tag)");
}
 
/*****intellisense()

web.layout(.(窗口对象,捕获事件) = 从窗口对象创建HTMLayout窗口\n 参数二默认为 _HL_HANDLE_LITE - 仅允许捕获按钮命令等基本交互事件
?web.layout = !weblayout.
!weblayout._contrls = 自定义窗口控件集合,\n使用INPUT,WIDGET,OBJECT标签,可创建自定义控件,type属性指定控件类名
!weblayout.queryEles(.("标签名[属性名='属性值']") = 使用CSS选择器语法,\n查找所有符合条件节点,\n如果有多个参数则首先调用string.format格式化为CSS文本,\n该函数名可使用'$'代替,等价于CSS!中的$函数
!weblayout.queryEle(.("标签名[属性名='属性值']") = 使用CSS选择器语法,\n查找第一个符合条件节点,\n如果有多个参数则首先调用string.format格式化为CSS文本,\n该函数名可使用'$1'代替,等价于CSS!中的$1函数
!weblayout.queryEle() = !layoutEle.
!weblayout.setMode( _HLM__ ) = 设置模式
!weblayout.setOption(_HL_OPTIONS__,1) = 设置选项
!weblayout.callback = @.callback = function ( message, wParam, lParam, vParam, notifyCode, pNmhdr ) {\n	__\n}
!weblayout.eventsHandler = @.eventsHandler = function (tag, he, evtg, prms) {\n	__\n}
!weblayout.onDocumentComplete = @.onDocumentComplete = function() {
	__/*网页加载完成*/;
}
!weblayout.onControlCreate = @.onControlCreate = function( ltEle, id, hwnd ){
	if( owner._contrls[id].hwnd = hwnd ){
		__
	}
}
!weblayout._contrls[] = !static.
!weblayout.go("__/*路径*/") = 跳转到指定网址（支持资源文件）
!weblayout.write(__/*HTML 代码*/) = 写出指定 HTML 代码
!weblayout.html = @.html = /**\n		__/*请输入HTML*/ \n**/
!weblayout.documentElement = !layoutEle.
!weblayout.getEle() = !layoutEle.
!weblayout.getFocus() = 获取当前输入焦点所在节点\n!layoutEle.
!weblayout.getEleByUid(.(UID) = 根据唯一标志符(数值)返回节点 
!weblayout.getEleByUid() = !layoutEle.
!weblayout.getEle("__") = 根据ID查找节点\n如果未找到，尝试使用name查找	
!weblayout.getEles("__") = 根据name属性查找节点
!weblayout.createEle(.(标签名) = 创建节点
!weblayout.createEle(.(标签名,节点内容) = 创建节点
!weblayout.createEle() = !layoutEle. 
!weblayout.fromPoint(.(x坐标,y坐标,是否屏幕坐标) = 参数三可选,默认为窗口客户区坐标\n成功返回节点对象
!weblayout.fromPoint() = !layoutEle.
!weblayout.updateWindow() = 刷新窗口
!weblayout.handleEvents(.( _HL_HANDLE_ALL ) = 启用事件回调\n可选使用一个或多个 _HL_HANDLE_ 前缀的常量指定要捕获的事件\n如果省略参数,则自动检测并设定该值\n但必须在此之前指定on前缀的任意事件回调函数\n此函数仅允许调用一次 
!weblayout.setCss(.(css,mediaType,baseUrl) = 设置CSS
!weblayout.setMasterCss(.(css) = 设置默认CSS\n该函数必须在调用其他函数之前调用
!weblayout.appendMasterCss(.(css) =  追加默认CSS
!weblayout.masterCss = @.masterCss = /**\n#my-button{ 
	behavior:command; 
	active-on!:
		__/*输入CSS脚本,语句用逗号分隔*/
  	; 
} 
**/
!weblayout.css = @.css = /**\n#my-button{ 
	behavior:command; 
	active-on!:
		__/*输入CSS脚本,语句用逗号分隔*/
  	; 
} 
**/

!weblayout.attachEventHandler(.(eventHandler,subscription) = 添加事件监听对象,参数一不可省略,\nsubscription 可选使用 _HL_HANDLE_ 前缀常量指定捕获的事件,\n 省略该参数则根据定义的回调函数自动设定该值,\n也可以使用对象的 __event_subsriptions 成员指定该值,\n该函数返回事件ID,用于注销监听
!weblayout.detachEventHandler(.(事件ID) = 注销事件监听对象,事件ID不可省略
end intellisense*****/

 /**intellisense()  
 __event_subsriptions = 在HTMLayout中的behavior对象,或eventHandle对象中可添加此成员变量,\n使用一个或多个 _HL_HANDLE_ 前缀的掩码来指定 指定订阅的事件\n如果未显示指定该参数,程序将自动设定为合适的值
_HL_HANDLE_ALL=@0xFFFF/*_HL_HANDLE_ALL*/
_HL_HANDLE_INITIALIZATION=@0/*_HL_HANDLE_INITIALIZATION*/
_HL_HANDLE_MOUSE=@1/*_HL_HANDLE_MOUSE*/
_HL_HANDLE_KEY=@2/*_HL_HANDLE_KEY*/
_HL_HANDLE_FOCUS=@4/*_HL_HANDLE_FOCUS*/
_HL_HANDLE_SCROLL=@8/*_HL_HANDLE_SCROLL*/
_HL_HANDLE_TIMER=@0x10/*_HL_HANDLE_TIMER*/
_HL_HANDLE_SIZE=@0x20/*_HL_HANDLE_SIZE*/
_HL_HANDLE_DRAW=@0x40/*_HL_HANDLE_DRAW*/
_HL_HANDLE_DATA_ARRIVED=@0x80/*_HL_HANDLE_DATA_ARRIVED*/
_HL_HANDLE_METHOD_CALL=@0x200/*_HL_HANDLE_METHOD_CALL*/
_HL_HANDLE_EXCHANGE=@0x1000/*_HL_HANDLE_EXCHANGE*/
_HL_HANDLE_GESTURE=@0x2000/*_HL_HANDLE_GESTURE*/
_HL_HANDLE_BEHAVIOR_EVENT=@0x100/*_HL_HANDLE_BEHAVIOR_EVENT*/
_HL_HANDLE_LITE=@0x80000100/*_HL_HANDLE_LITE*/
_HL_HANDLE_INPUT=@0x80000007/*_HL_HANDLE_INPUT*/
_HL_DISABLE_INITIALIZATION=@0x80000000/*_HL_DISABLE_INITIALIZATION*/

_HLN_CREATE_CONTROL=@0xB00/*_HLN_CREATE_CONTROL*/
_HLN_DESTROY_CONTROL=@0xB06/*_HLN_DESTROY_CONTROL*/
_HLN_LOAD_DATA=@0xB01/*_HLN_LOAD_DATA*/
_HLN_CONTROL_CREATED=@0xB02/*_HLN_CONTROL_CREATED*/
_HLN_DATA_LOADED=@0xB03/*_HLN_DATA_LOADED*/
_HLN_DOCUMENT_COMPLETE=@0xB04/*_HLN_DOCUMENT_COMPLETE*/
_HLN_UPDATE_UI=@0xB05/*_HLN_UPDATE_UI*/
_HLN_ATTACH_BEHAVIOR=@0xB07/*_HLN_ATTACH_BEHAVIOR*/
_HLN_DIALOG_CREATED=@0xB0F/*_HLN_DIALOG_CREATED*/
_HLN_DIALOG_CLOSE_RQ=@0xB10/*_HLN_DIALOG_CLOSE_RQ*/
_HWND_TRY_DEFAULT=@0/*_HWND_TRY_DEFAULT*/
_HWND_DISCARD_CREATION=@1/*_HWND_DISCARD_CREATION*/
_LOAD_OK=@0/*_LOAD_OK*/
_LOAD_DISCARD=@1/*_LOAD_DISCARD*/

_HLRT_DATA_HTML=@0/*_HLRT_DATA_HTML*/
_HLRT_DATA_IMAGE=@1/*_.HLRT_DATA_IMAGE*/
_HLRT_DATA_STYLE=@2/*_HLRT_DATA_STYLE*/
_HLRT_DATA_CURSOR=@3/*_HLRT_DATA_CURSOR*/
_HLRT_DATA_SCRIPT=@4/*_HLRT_DATA_SCRIPT*/

_HLM_LAYOUT_ONLY=@0/*_HLM_LAYOUT_ONLY*/
_HLM_SHOW_SELECTION=@1/*_HLM_SHOW_SELECTION*/

_DATA_ELEMENT=@0/*_DATA_ELEMENT*/
_INLINE_TEXT_ELEMENT=@1/*_INLINE_TEXT_ELEMENT*/
_INLINE_BLOCK_ELEMENT=@2/*_INLINE_BLOCK_ELEMENT*/
_BLOCK_TEXT_ELEMENT=@3/*_BLOCK_TEXT_ELEMENT*/
_BLOCK_BLOCK_ELEMENT=@4/*_BLOCK_BLOCK_ELEMENT*/

_HL_SMOOTH_SCROLL=@1/*_HL_SMOOTH_SCROLL*/
_HL_CONNECTION_TIMEOUT=@2/*_HL_CONNECTION_TIMEOUT*/
_HL_HTTPS_ERROR=@3/*_HL_HTTPS_ERROR*/
_HL_FONT_SMOOTHING=@4/*_HL_FONT_SMOOTHING*/
_HL_ANIMATION_THREAD=@5/*_HL_ANIMATION_THREAD*/
_HL_TRANSPARENT_WINDOW=@6/*_HL_TRANSPARENT_WINDOW*/

_SIH_REPLACE_CONTENT=@0/*_SIH_REPLACE_CONTENT*/
_SIH_INSERT_AT_START=@1/*_SIH_INSERT_AT_START*/
_SIH_APPEND_AFTER_LAST=@2/*_SIH_APPEND_AFTER_LAST*/
_SOH_REPLACE=@3/*_SOH_REPLACE*/
_SOH_INSERT_BEFORE=@4/*_SOH_INSERT_BEFORE*/
_SOH_INSERT_AFTER=@5/*_SOH_INSERT_AFTER*/

_HL_OPTIONS_SMOOTH_SCROLL=@1/*_HL_OPTIONS_SMOOTH_SCROLL*/
_HL_OPTIONS_CONNECTION_TIMEOUT=@2/*_HL_OPTIONS_CONNECTION_TIMEOUT*/
_HL_OPTIONS_HTTPS_ERROR=@3/*_HL_OPTIONS_HTTPS_ERROR*/
_HL_OPTIONS_FONT_SMOOTHING=@4/*_HL_OPTIONS_FONT_SMOOTHING*/
_HL_OPTIONS_ANIMATION_THREAD=@5/*_HL_OPTIONS_ANIMATION_THREAD*/
_HL_OPTIONS_TRANSPARENT_WINDOW=@6/*_HL_OPTIONS_TRANSPARENT_WINDOW*/ 

_HLM_LAYOUT_ONLY=@0/*_HLM_LAYOUT_ONLY*/
_HLM_SHOW_SELECTION=@1/*_HLM_SHOW_SELECTION*/ 

_HLRT_DATA_HTML=@0/*_HLRT_DATA_HTML*/
_HLRT_DATA_IMAGE=@1/*_HLRT_DATA_IMAGE*/
_HLRT_DATA_STYLE=@2/*_HLRT_DATA_STYLE*/
_HLRT_DATA_CURSOR=@3/*_HLRT_DATA_CURSOR*/
_HLRT_DATA_SCRIPT=@4/*_HLRT_DATA_SCRIPT*/
end intellisense**/
