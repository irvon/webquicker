
assert(web.layout);
namespace web.layout;

var dll = dll;

class element{
	ctor (he,addref = true ) {
		if(!he)return null; 
		if( _cache_elements[he] ) return _cache_elements[he];
		
		this.handle = he;
		this.state = state(this);
		this.style = style(this);
		if( he && addref ){
			UseElement(he);
		}
		_cache_elements[he] = this;
		..table.add_gc(this,"release");
	}
	@_metaProperty;
}

import web.layout.element.state;
import web.layout.element.style;
//import web.layout.element.range;

var element_t =  element;
var valueObject_t = valueObject;
var push = ..table.push;
  	
namespace element{
	_cache_elements = { @{_weak="kv"} }
	

  	var fromUnicode = ..string.fromUnicode;
  	var toUnicode = ..string.toUnicode
  	var fromto = ..string.fromto;
  	
	_metaProperty = ..util.metaProperty(
		_eq = function(ele){
			return owner[["handle"]] == ele[["handle"]];
		};
		clone = function(ins){
			var re,he = CloneElement(owner[["handle"]]);
			if( re == 0/*_HLDOM_OK*/ ){
				var ele = element_t(he,false);
				if( ins ){
					var ret,phe = GetParentElement(owner[["handle"]] );
					if(ret==0){
						InsertElement(he,phe,ins);
					};
				}
				return ele; 
			}
		};
		detach = function(ele){
			return DetachElement(owner[["handle"]]) = 0/*_HLDOM_OK*/;
		};
		setAttribute = function (n, v) {
			if( n[1] >= 0x80 ) n = fromto(n,0,65001);
			var t = type(v); 
			if( ( t == "string" ) ||  ( v === null ) ){
				SetAttributeByName(owner[["handle"]], n,toUnicode(v) );
			}
			else{
				owner[[n]] = v;
			}
		};
		getAttribute = function (n) {
			if( n[1] >= 0x80 )n = fromto(n,0,65001);
			var re,v = GetAttributeByName(owner[["handle"]], n );
			if ( re==0 && v) return fromUnicode(v,0,true) : "";  
		};
		getCustomAttribute = function(n){ 
			var v = owner.getAttribute(n)
			if(!v) v = owner.style["-" + n];
			return v;
		};
		eachAttribute = function(){ 
			var re,count = GetAttributeCount(owner[["handle"]],0);
			if( re != 0/*_HLDOM_OK*/)return function(){};
			return function(i){
				if( i < count ){
					var re,n,v = GetNthAttribute(owner,i)
					if( re == 0/*_HLDOM_OK*/)
						return i+1,fromto( n, , ,true ),fromUnicode(v,0,true);
				}
			},owner[["handle"]],0
		};
		enumStyle = function(proc){
			var ruleType = {"css";"inline";"script"};
			var proc_c = ..raw.tostdcall( 
				function(pdef,prm){
					var s = ..raw.convert(pdef,HTMLayoutCSSRuleDef() );
					proc( fromUnicode(s.selector,0,true),ruleType[s.rule_type],s.file_url,s.file_line_no )
				},"void( pointer pdef, pointer prm )"
			);
			EnumElementStyles(owner[["handle"]],proc_c );
		};
		tagName = { 
			_get = function () {
				var re, p = GetElementType(owner[["handle"]]);
				if ( re==0/*_HLDOM_OK*/ ) 
					return ..raw.str(p);
			}
		}; 
		innerText = {
			_set = function (v) {
				v = fromto(v, 0, 65001) : "";
				SetElementInnerText(owner[["handle"]], v, #v);
			}
			_get = function () {
				var re, p = GetElementInnerText(owner[["handle"]]); 
				return fromto(p,,,true);
			}
		};
		innerHTML = {
			_set = function (html) {
				html = fromto(html, 0, 65001) : "";
				SetElementHtml(owner[["handle"]], html, #html, 0/*_SIH_REPLACE_CONTENT*/);
			}
			_get = function () {
				var re, p = GetElementHtml(owner[["handle"]], , false); 
				return fromto(p,,,true);
			}
		};
		insertAdjacentHTML = function(opt,html){
			opt = _insertAdjacentOption[opt];
			if(!opt)error("指定了无效的位置参数",2);
			html = fromto(html, 0, 65001) : "";
			SetElementHtml(owner[["handle"]], html, #html, opt);
		};
		outerHTML = {
			_set = function (html) {
				html = fromto(html, 0, 65001) : "";
				SetElementHtml(owner[["handle"]], html, #html, 3/*_SOH_REPLACE*/);
			}
			_get = function () {
				var re, p = GetElementHtml(owner[["handle"]], , true); 
				return fromto(p,,,true);
			}
		};
		index = function(){ 
        	var ret,index = GetElementIndex(owner[["handle"]],0);
        	return index + 1;
      	};
      	uid = {
      		_get = function(){
      			var ret,uid = GetElementUID(owner[["handle"]],0);
        		return uid;
      		} 
      	};
      	getElementByUid = function (uid=0) {
      		var re,hwnd = GetElementHwnd(owner[["handle"]],0,true);
      		if( re == 0 && hwnd ){
				var re,he = GetElementByUID(hwnd,uid) ;//declare at: web.layout
				if( re == 0/*_HLDOM_OK*/ && he )
					return element_t(he)
			}
		}; 
		getForm = function(){
			return ..win.form.getForm( owner.getHwnd(true) );
		};
      	getHwnd = function(root){
      		var re,hwnd = GetElementHwnd(owner[["handle"]],0,root)
      		return hwnd;
      	};
      	updateWindow = function(root){
      		var re,hwnd = GetElementHwnd(owner[["handle"]],0,root)
      		if( re == 0 && hwnd )
      			return HTMLayoutUpdateWindow(hwnd);
      	};
      	isVisible = function(){
      		var re,v = IsElementVisible( owner[["handle"]] );
      		return v;
      	}  
      	isEnabled = function(){ 
      		var re,v = IsElementEnabled ( owner[["handle"]] );
      		return v; 
      	};
      	getValueObject = function(){ 
      		var re, val = ControlGetValue( owner[["handle"]],valueObject_t() ); 
      		if( re = 0/*_HL_HV_OK*/ ){ 
      			return val;
      		}
      	};
      	setValueObject = function(v,units=0,dataType){ 
      		var val = owner.getValueObject();
      		if( !val ){
      			val = valueObject_t(v,units,dataType)
      		}
      		else {
      			val.setValue(v,units,dataType);
      		} 
      		ControlSetValue(owner[["handle"]], val); 
      		val.clear();
      	};
		value = {
			_set = function (v) { 
				owner.setValueObject(v);
			}
			_get = function () { 
				var val = owner.getValueObject() 
				if( val ){
					var ret = val.value;
					val.clear();
					return ret;
				};
			}
		};
		insert = function (he, ind = -1) { 
			if(!he) error("插入节点参数不能为空",2)
			return InsertElement(he[["handle"]] : he,owner[["handle"]], ind) == 0/*_HLDOM_OK*/;
		};
		append = function (he){ 
			if(!he) error("追加节点参数不能为空",2)
			return InsertElement(he[["handle"]] : he,owner[["handle"]], 0x7FFFFFFF) == 0/*_HLDOM_OK*/; 
		}; 
		modifyState = function (state = 0, clear = 0, update = true) { 
			return SetElementState(owner[["handle"]], state, clear, update);
		};
		getState = function (state=~0) { 
			var re, st = GetElementState(owner[["handle"]], 0);
			return st & state;
		};
		visitElement = function (tagName, attrName, attrValue, depth = 0) { 
			var ele; 
			var callback_c = ..raw.tostdcall( function(he, param){
				ele = element_t(he);
			} , "int(pointer he, pointer)"); 
			if( 0/*_HLDOM_OK*/ = VisitElements(owner[["handle"]], tagName, attrName,toUnicode(attrValue), callback_c,  , depth) )
				return ele;
		};
		visitElements = function (tagName, attrName, attrValue, depth = 0) { 
			var eles = {}; 
			var callback_c = ..raw.tostdcall( function(he, param){
				push( eles,element_t(he) );
			} , "int(pointer he, pointer)"); 
			if( 0/*_HLDOM_OK*/ = VisitElements(owner[["handle"]], tagName, attrName,toUnicode(attrValue), callback_c,  , depth) ) 
				return eles;
		};
		enumQuery = function(proc,cssSelectors,...){ 
			if( ... ) cssSelectors = ..string.format(cssSelectors,... );

			var callback_c = ..raw.tostdcall( function(he){
				return  proc( element_t(he) ); //true stop;
			} , "bool(pointer he, pointer)");
			
			SelectElements(owner[["handle"]],cssSelectors,callback_c) ;
		};
		queryElements = function(cssSelectors,...){ 
			if( ... ) cssSelectors = ..string.format(cssSelectors,... );
			
			var eles = {}; 
			var callback_c = ..raw.tostdcall( function(he, param){
				..table.push( eles,element_t(he) );
			} , "bool(pointer he, pointer)");
			if( 0/*_HLDOM_OK*/ = SelectElements(owner[["handle"]],cssSelectors,callback_c) )
				return eles; 
		};
		queryElement = function(cssSelectors,...){
			if( ... ) cssSelectors = ..string.format(cssSelectors,... );
			
			var ele; 
			var callback_c = ..raw.tostdcall( function(he, param){ ele = element_t(he); return true; }
				 , "bool(pointer he, pointer)");
			
			SelectElements(owner[["handle"]],cssSelectors,callback_c)
			return ele;
		} 
		queryParent = function(cssSel,depth=0){ 
			var ret,heFound =  SelectParent(owner[["handle"]],cssSel,depth) 
			if(ret==0) return element_t(heFound);  
		};
		testParent = function(cssSel,depth=0){
			var ret,heFound =  SelectParent(owner[["handle"]],cssSel,depth)  
			return (ret==0 && heFound);
		}
		test = function(cssSelector,p){ 
			return owner.testParent(cssSelector,1) || ( p ? owner.testParent(cssSelector,0) )
		}; 
		getElementById = function (id) { 
			return owner.visitElement(, "id", id) : owner.visitElement(, "name", id) ;
		}
		getElementsByName = function (name) { 
			return owner.visitElements(, "name", name);
		}; 
		getElementsByTagName = function (tag) {
			return owner.visitElements(tag);
		}; 
		update = function( remeasure ){
          	UpdateElement(owner[["handle"]], remeasure ); 
      	};
      	updateEx = function( mode ){
          	UpdateElementEx(owner[["handle"]], mode); 
       	};
      	root = function(){
			var p = owner.parent();
			if(p)return p.root();
			return owner;
		};
		parent = function(){
			var ret,parent =  GetParentElement(owner[["handle"]] );
			if(ret==0) return element_t(parent);
		}; 
		nextSibling = function(offset=1){
			var ret,parent =  GetParentElement(owner[["handle"]] );
			if( ret==0 && parent ){
				var ret,index = GetElementIndex(owner[["handle"]],0);
				if( ret==0 ){
					var ret,child = GetNthChild(parent, index + offset );
					if( ret==0 ) return element_t(child);
				} 
			}
		}; 
		previousSibling = function(offset=1){
			return owner.nextSibling(-offset); 
		};
		firstSibling  = function(offset=1){
			var ret,parent =  GetParentElement(owner[["handle"]] );
			if( ret==0 && parent ){
				var ret,child = GetNthChild(parent,0 );
				if( ret==0 ) return element_t(child);
			}
		}; 
		lastSibling = function(){
			var ret,parent =  GetParentElement(owner[["handle"]] );
			if( ret==0 && parent ){
				var ret,count = GetChildrenCount(owner[["handle"]],0 );
				if( ret==0 ){
					var ret,child = GetNthChild(parent,count-1 );
					if( ret==0 ) return element_t(child);
				} 
			}
		}; 
		isChild = function(c){
			if( !c ) return;
			if( owner == c ) return true;
			return owner.isChild( c.parent() )
		};
		isParent = function(p){
			if(!p)return;
			return p.isChild(owner);
		};
		child = function( index = 1 ){
        	var ret,child = GetNthChild(owner[["handle"]], index-1 );
        	if(!ret) return element_t(child);
      	};
      	childCount = function( ){
        	var ret,count = GetChildrenCount(owner[["handle"]],0 );
        	return count;
      	};
      	eachChild = function(first=1,last,step=1){
      		if(!last)
      			_,last = GetChildrenCount(owner[["handle"]],0 ); 
      			
      		if( first <= last ){
      			return function(idx){ 
      				idx += step;
      				var ret,child = GetNthChild(owner[["handle"]], idx-1 );
      				if( idx <= last ) { 
      					if( !ret ) return idx,element_t(child);
      				}
      			},owner,first-step;
      		}
      		else {
      			if(step>0) step = -step;
      			
      			return function(idx){ 
      				idx += step;
      				if( idx >= last ) {
      					var ret,child = GetNthChild(owner[["handle"]], idx-1 );
      					if( !ret ) return idx,element_t(child);
      				}
      			},owner,first-step;
      		}
      	};
		previous = function(){
        	var idx = owner.index();
        	if(!idx)return;
        	
        	var p = owner.parent() ;
        	if( p ){ 
        		return p.child(idx-1);
        	}
      	} ;  	
      	next = function(){
      		var idx = owner.index()+1; 
        	var p = owner.parent() ;
        	if( idx >= pel.childCount() )return;
        	
        	if( p ){ 
        		return p.child(idx+1);
        	} 
      	};
		postEvent = function( event_code, reason = 0, he){
			if( type(event_code) == "string" )
				event_code = __event.findEventCodeByName(event_code);
				
			return 0 == PostEvent(owner[["handle"]], event_code, he? ( he[["handle"]]: he) : owner[["handle"]], reason);
        	assert(ret == 0);
		};
		sendEvent = function(event_code, reason=0, he){
			if( type(event_code) == "string" )
				event_code = __event.findEventCodeByName(event_code);
				
        	var ret,handled = SendEvent(owner[["handle"]], event_code,  he? ( he[["handle"]]: he) : owner[["handle"]], reason, false); 
        	return ret && handled;
		}; 
		scrollToView = function(toTopOfView,smooth){
			 var flags = 0;
        	if(toTopOfView) flags |= 0x01 /* _HTMLAYOUT_SCROLL_FLAGS_SCROLL_TO_TOP */;
        	if(smooth) flags |= 0x10 /* _HTMLAYOUT_SCROLL_FLAGS_SCROLL_SMOOTH */;
        	ScrollToView(owner[["handle"]],flags);
		}; 
		getScrollInfo = function(){
			var ret,pos,rect,size = GetScrollInfo(owner[["handle"]],::POINT(),::RECT(),::SIZE() )
			if(ret==0/*_HLDOM_OK*/){
				return { pos = pos; rect = rect; size = size; }
			}
		};
		setScrollPos = function(x=0,y=0,smooth){ 
			var pt = ::POINT(x,y);
			SetScrollPos(owner[["handle"]],x,y,smooth );
		};
		getRect = function(areas= 4/*_HL_VIEW_RELATIVE*/ ){
			var rc = ::RECT();
			var re = GetElementLocation(owner[["handle"]],rc,areas);
			if( re == 0/*_HLDOM_OK*/ )
				return rc;
		};
		setPos = function(x,y,cx,cy){
			if( ! ( x && y ) ){
				var rc = owner.getRect(4)
				if(!x)x=rc.left;
				if(!y)y=rc.top; 
			}
			if( ! ( cx && cy ) ){
				MoveElement(owner[["handle"]],x,y);
			}
			else {
				MoveElementEx(owner[["handle"]],x,y,cx,cy)
			};
		}
		popupAnchor = function(anchor,place=2){
			return 0/*_HLDOM_OK*/ == ShowPopup(owner[["handle"]],anchor[["handle"]] : anchor, place)
		}
		popupHide = function(){
			return 0/*_HLDOM_OK*/ == HidePopup(owner[["handle"]])
		}
		popup = function(x=0,y=0,ani=0,point=1){
			return 0/*_HLDOM_OK*/ == ShowPopupAt(owner[["handle"]],x,y, ( point << 16 ) | ( ani?1:0 ) ) 
		}
		popupTrack = function(x=0,y=0,ani=0,point=1){
			var re,he = TrackPopupAt(owner[["handle"]],x,y, ( point << 16 ) | ( ani?1:0 ) );
			if( re == 0/*_HLDOM_OK*/ )
				return element_t(he);
		} 
		combineUrl = function(url){
			var buffer = ..raw.malloc(0x800, ( toUnicode(url) ) );
			var re = CombineURL(owner[["handle"]],buffer,0x800);
			if( re == 0/*_HLDOM_OK*/)
				return fromUnicode( ..raw.str(buffer,true),0,true);  
		}
		capture = { 
			_set = function( v ){ 
				if(v)
					SetCapture(owner[["handle"]])
				else 
					..win.releaseCapture(); 
			} 	
		}; 	
		setEventRoot = function(){
			var re,hpre = SetEventRoot(owner[["handle"]]);
			if( re == 0/*_HLDOM_OK*/ )
				return element_t(hpre); 
		};
		setTimer = function(ms=100,id=0){
			return  0/*_HLDOM_OK*/ == SetTimerEx(owner[["handle"]],ms,id);
		}
		_callMethod = function(params){
			if( !( params._struct && ( params.methodID !== null) ) )
				error("参数错误",2)
			return 0/*_HLDOM_OK*/ == CallBehaviorMethod(owner[["handle"]],params);
		}
		xcall = function(methodName,...){
			var args = {...};
			for(k,v in args){
				 args[k] = valueObject_t(v);
			}
			var args_s = {struct args[]=args};
			
			var callParams = __event.XCALL_PARAMS();
			with callParams{
				argv = ..raw.malloc(args_s);
				method_name = methodName;
				argc = #args;
				retval = valueObject_t();
			}
			if( owner._callMethod(callParams) ){
				return callParams.retval.getValue();
			}
		}; 
		click = function(){
			return owner._callMethod({INT methodID=0/*_HL_DO_CLICK*/});
		}; 
		isEmpty= function(){
			var emptyParams = {INT methodID=0xFC/*_HL_IS_EMPTY*/;bool empty;}
			owner._callMethod(emptyParams);
			return emptyParams.empty;
		};
		sort = function(cmpFunc,first=1,last=-1){
			owner[["ELEMENT_COMPARATOR_PROTECT_GC_C"]] = ..raw.tostdcall(  
			function(he1,he2,param){
				return cmpFunc( _cache_elements[he1] or element_t(he1),_cache_elements[he2] or element_t(he2)) 
			},"int(pointer he1,pointer he2,pointer parma)" ); 
			return 0 == SortElements( owner[["handle"]],first-1,last,owner[["ELEMENT_COMPARATOR_PROTECT_GC_C"]] );  
		};	
		attachEventHandler = function( handler,subscription ){
			var hOwner;
			if(!handler){
				if( owner[["attachEventHandlerId"]] )
					return null,"节点对象禁止重复绑定事件";
					
				handler = owner;
				hOwner = true; 
			} 
			
			if(!subscription){
				if( handler._event_subsriptions ){
					subscription = handler._event_subsriptions;
				}
				else{
					subscription= __event.getSubscriptions(handler);
				}
			}
			
			var tagId = __event._handlerByTagRegistry.reg(handler);
			var ret = AttachEventHandlerEx(owner[["handle"]], __event._handlerByTagId_c,tagId,subscription ); 
			 
			if( ret == 0/*_HLDOM_OK*/){
				if( hOwner ){
					owner[["attachEventHandlerId"]] = tagId;
				}
				return tagId;
			}
			else {
				__event._handlerByTagRegistry.unReg(tagId);
			}
		};
		detachEventHandler = function(tagId){
			if(!tagId){
				tagId = owner[["attachEventHandlerId"]]; 
			}
			if(tagId){
				if( tagId == owner[["attachEventHandlerId"]] )
					owner[["attachEventHandlerId"]] = null;
					
				var ret = ( 0/*_HLDOM_OK*/ == DetachEventHandler(owner[["handle"]], __event._handlerByTagId_c,tagId ) )
				__event._handlerByTagRegistry.unReg(tagId);
				return ret;
			}
		};
		release = function(){
			if( owner[["handle"]] ){ 
				_cache_elements[ owner[["handle"]] ] = null;
				if(owner[["attachEventHandlerId"]])owner.detachEventHandler();
				var ret = UnuseElement(owner[["handle"]]) 
				//owner[["handle"]] = null;
				return ret == 0/*_HLDOM_OK*/;
			}
		};
		delete = function(){
			if( owner[["handle"]] ){
				_cache_elements[owner[["handle"]]] = null;
				
				if(owner[["attachEventHandlerId"]])owner.detachEventHandler();
				var ret = DeleteElement(owner[["handle"]])
				
				//owner[["handle"]] = null; 
				return  ret == 0/*_HLDOM_OK*/; 
			}
		};
	); 
	 
	namespace _metaProperty{
		get = getAttribute;
		set = setAttribute;  
		$ = queryElements;
		$1 = queryElement
		$1p = queryParent; 
		children = childCount;
	}; 
	 
  	_insertAdjacentOption = {
		beforeBegin = 4/*_SOH_INSERT_BEFORE*/;
		afterBegin = 1/*_SIH_INSERT_AT_START*/;
		beforeEnd = 2/*_SIH_APPEND_AFTER_LAST*/;
		afterEnd = 5/*_SOH_INSERT_AFTER*/
	} 
  	
	GetAttributeByName = dll.api("HTMLayoutGetAttributeByName","int(POINTER he,STRING name,pointer& p_value)");
	SetAttributeByName = dll.api("HTMLayoutSetAttributeByName","int(POINTER he,STRING name,pointer value)");
	GetAttributeCount = dll.api("HTMLayoutGetAttributeCount","int(POINTER he,INT& p_count)");
	GetNthAttribute = dll.api("HTMLayoutGetNthAttribute","int(POINTER he,INT n,pointer& p_name,pointer& p_value)");
	ClearAttributes = dll.api("HTMLayoutClearAttributes","int(POINTER he)");
	
	InsertElement = dll.api("HTMLayoutInsertElement","int(POINTER he,POINTER hparent,INT index)"); 
	GetParentElement = dll.api("HTMLayoutGetParentElement","int(POINTER he,pointer& p_parent_he)");
	GetChildrenCount = dll.api("HTMLayoutGetChildrenCount","int(POINTER he,INT& count)");
	GetNthChild = dll.api("HTMLayoutGetNthChild","int(POINTER he,INT n,pointer& he)");
	
	GetElementText = dll.api("HTMLayoutGetElementText","int(POINTER he,pointer& characters,INT& length)");
	GetElementHtml = dll.api("HTMLayoutGetElementHtml","int(POINTER he,pointer& utf8bytes,bool outer)");
	GetElementInnerText = dll.api("HTMLayoutGetElementInnerText","int(POINTER he,pointer& utf8bytes)");
	SetElementInnerText = dll.api("HTMLayoutSetElementInnerText","int(POINTER he,pointer utf8bytes,INT length)");  
	GetElementIndex = dll.api("HTMLayoutGetElementIndex","int(POINTER he,INT& p_index)");
	GetElementType = dll.api("HTMLayoutGetElementType","int(POINTER he,pointer &p_type)");
	
	GetElementLocation = dll.api("HTMLayoutGetElementLocation","int(POINTER he,struct& p_location,INT areas)");
	ScrollToView = dll.api("HTMLayoutScrollToView","int(POINTER he,INT flags)");
	UpdateElement = dll.api("HTMLayoutUpdateElement","int(POINTER he,bool remeasure)");
	UpdateElementEx = dll.api("HTMLayoutUpdateElementEx","int(POINTER he,INT flags)");
	SetCapture = dll.api("HTMLayoutSetCapture","int(POINTER he)");
	SetEventRoot = dll.api("HTMLayoutSetEventRoot","int(POINTER he,pointer& phePrevRoot)");
	GetElementHwnd = dll.api("HTMLayoutGetElementHwnd","int(POINTER he,int& p_hwnd,bool rootWindow)");
	
	CombineURL = dll.api("HTMLayoutCombineURL","int(POINTER he,POINTER buffer,INT size)");
	VisitElements = dll.api("HTMLayoutVisitElements","int(POINTER he,pointer tagName,pointer attributeName,pointer attributeValue,pointer callback,pointer param,INT depth)");
	SelectElements = dll.api("HTMLayoutSelectElements","int(POINTER he,string CSS_selectors,pointer callback,pointer param)");

	SelectParent = dll.api("HTMLayoutSelectParent","int(POINTER he,string selector,INT depth,pointer& heFound)"); 
	SetElementHtml = dll.api("HTMLayoutSetElementHtml","int(POINTER he,pointer html,INT htmlLength,INT where)");
	DeleteElement = dll.api("HTMLayoutDeleteElement","int(POINTER he)");
	GetElementUID = dll.api("HTMLayoutGetElementUID","int(POINTER he,INT& puid)");
	GetElementState = dll.api("HTMLayoutGetElementState","int(POINTER he,INT& pstateBits)");
	SetElementState = dll.api("HTMLayoutSetElementState","int(POINTER he,INT stateBitsToSet,INT stateBitsToClear,bool updateView)");
	
	CloneElement = dll.api("HTMLayoutCloneElement","int(POINTER he,pointer& phe)"); 
	DetachElement = dll.api("HTMLayoutDetachElement","int(POINTER he)"); 
	SetTimerEx = dll.api("HTMLayoutSetTimerEx","int(POINTER he,INT millisecond,INT timerId)");
	AttachEventHandlerEx = dll.api("HTMLayoutAttachEventHandlerEx","int(POINTER he,pointer pep,INT tag,INT subscription)");
	DetachEventHandler = dll.api("HTMLayoutDetachEventHandler","int(POINTER he,pointer pep,INT tag)");
	
	SendEvent = dll.api("HTMLayoutSendEvent","int(POINTER he,INT appEventCode,pointer heSource,INT reason,bool& handled)");
	PostEvent = dll.api("HTMLayoutPostEvent","int(POINTER he,INT appEventCode,pointer heSource,INT reason)");
	CallBehaviorMethod = dll.api("HTMLayoutCallBehaviorMethod","int(POINTER he,struct &params)");
	
	 /**intellisense()
	_HL_REQUEST_TYPE_GET_ASYNC=@0/*_HL_REQUEST_TYPE_GET_ASYNC*/
	_HL_REQUEST_TYPE_POST_ASYNC=@1/*_HL_REQUEST_TYPE_POST_ASYNC*/
	end intellisense**/
	RequestElementData = dll.api("HTMLayoutRequestElementData","int(POINTER he,pointer url,INT dataType,int initiator)");
	HttpRequest = dll.api("HTMLayoutHttpRequest","int(POINTER he,pointer url,INT dataType,INT requestType,struct requestParams,INT nParams)");
	
	GetScrollInfo = dll.api("HTMLayoutGetScrollInfo","int(POINTER he,struct& scrollPos,struct& viewRect,struct& contentSize)");
	SetScrollPos = dll.api("HTMLayoutSetScrollPos","int(POINTER he,int x,int y,bool smooth)");
	GetElementIntrinsicWidths = dll.api("HTMLayoutGetElementIntrinsicWidths","int(POINTER he,INT& pMinWidth,INT& pMaxWidth)");
	GetElementIntrinsicHeight = dll.api("HTMLayoutGetElementIntrinsicHeight","int(POINTER he,INT forWidth,INT& pHeight)");
	IsElementVisible = dll.api("HTMLayoutIsElementVisible","int(POINTER he,bool& pVisible)");
	IsElementEnabled = dll.api("HTMLayoutIsElementEnabled","int(POINTER he,bool& pEnabled)");
	SortElements = dll.api("HTMLayoutSortElements","int(POINTER he,INT first,INT last,POINTER func,ptr p)");
	
	SwapElements = dll.api("HTMLayoutSwapElements","int(POINTER he1,pointer he2)");
	TraverseUIEvent = dll.api("HTMLayoutTraverseUIEvent","int(INT evt,pointer eventCtlStruct,bool& bOutProcessed)");
	ProcessUIEvent = dll.api("HTMLayoutProcessUIEvent","int(POINTER he,INT evt,pointer eventCtlStruct,bool& bOutProcessed)");

	ControlGetValue = dll.api("HTMLayoutControlGetValue","int(POINTER he,struct& pVal)");
	ControlSetValue = dll.api("HTMLayoutControlSetValue","int(POINTER he,struct pVal)");
	Enumerate = dll.api("HTMLayoutEnumerate","int(POINTER he,pointer pcb,pointer p,bool forward)");
	GetCharacterRect = dll.api("HTMLayoutGetCharacterRect","int(POINTER he,int pos,struct& outRect)");
	ElementSetExpando = dll.api("HTMLayoutElementSetExpando","int(POINTER he,struct pExpando)");
	ElementGetExpando = dll.api("HTMLayoutElementGetExpando","int(POINTER he,pointer ppExpando)");
	MoveElement = dll.api("HTMLayoutMoveElement","int(POINTER he,INT xView,INT yView)");
	MoveElementEx = dll.api("HTMLayoutMoveElementEx","int(POINTER he,INT xView,INT yView,INT width,INT height)");
	AnimateElement = dll.api("HTMLayoutAnimateElement","int(POINTER he,pointer pAnimator,pointer animatorParam)");
	EnqueueMeasure = dll.api("HTMLayoutEnqueueMeasure","int(POINTER he)");
	ParseValue = dll.api("HTMLayoutParseValue","int(pointer text,INT textLength,INT mode,struct pVal)");
	
	ShowPopup = dll.api("HTMLayoutShowPopup", "int(POINTER hePopup, POINTER heAnchor, INT placement)");
	ShowPopupAt = dll.api("HTMLayoutShowPopupAt", "int(POINTER hePopup,int x,int y, INT mode)");
	TrackPopupAt = dll.api("HTMLayoutTrackPopupAt", "int(POINTER hePopup,int x,int y, INT mode, pointer& pheItem)");
	HidePopup = dll.api("HTMLayoutHidePopup", "int(POINTER he)"); 
	
	UseElement = dll.api("HTMLayout_UseElement","int(POINTER he)");
	UnuseElement = dll.api("HTMLayout_UnuseElement","int(POINTER he)");
	
	EnumElementStyles = dll.api("HTMLayoutEnumElementStyles", "int(pointer he, pointer callback, pointer callback_prm)");
	class HTMLayoutCSSRuleDef{
  		int rule_type; 
  		string file_url;   
  		int file_line_no;  
  		pointer selector;  
	} 
}
 
/**intellisense()
layoutEle = HTMLayout节点对象保留变量名,\n请勿用于表示其他类型对象\n!layoutEle.
ltTarget = HTMLayout事件触发目标节点\n请勿用于表示其他类型对象\n!layoutEle.
ltEle = HTMLayout节点对象\n请勿用于表示其他类型对象\n!layoutEle. 
layoutEle2 = !layoutEle. 
ltEle2 = !layoutEle.

!layoutEle.visitElement() = !layoutEle.
!layoutEle.getElementById() = !layoutEle.
!layoutEle.getElementByUid() = !layoutEle.
!layoutEle.queryParent() = !layoutEle.
!layoutEle.queryElements() = !layoutEle.
!layoutEle.getElementsByName() = !layoutEle.
!layoutEle.getElementsByTagName() = !layoutEle.
web.layout.element() = !layoutEle.

!layoutEle.outerHTML = 节点HTML源码
!layoutEle.innerHTML = 节点内部HTML源码
!layoutEle.insertAdjacentHTML("beforeBegin",__/*HTML代码*/) = 在节点之前插入HTML
!layoutEle.insertAdjacentHTML("afterBegin",__/*HTML代码*/) = 在节点内部最前面插入HTML
!layoutEle.insertAdjacentHTML("beforeEnd",__/*HTML代码*/) = 在节点内部最后面插入HTML 
!layoutEle.insertAdjacentHTML("afterEnd",__/*HTML代码*/) = 在节点之后插入HTML
!layoutEle.tagName = 返回表示节点类型的字符串\n例如层节点返回"div"
!layoutEle.type = 返回控件类型(type属性) 
!layoutEle.cls = 自定义控件类名
!layoutEle.capture = 设为true开始捕获鼠标消息,设为false取消捕获
!layoutEle.innerText = 设置或者获取文本
!layoutEle.modifyState(.(要增加的状态,要取消的状态,是否更新) = 设置状态，以 _HL_STATE_ 开头的常量表示指定状态\n所有参数可省略,参数三默认为true
!layoutEle.getState(htmlayout.ELEMENT_STATE_BITS.__) = 是否有某个状态，以 _HL_STATE_ 开头的常量表示指定状态　
!layoutEle.visitElement(.(节点类型,属性名,属性值,深度) = 查找第一个符合的节点，所有参数都可空
!layoutEle.visitElements(.(节点类型,属性名,属性值,深度) = 查找所有符合的节点，所有参数都可空
!layoutEle.queryElements(.("标签名[属性名='属性值']") = 使用CSS选择器语法,\n在当前节点的子节点中查找所有符合条件节点,\n如果有多个参数则首先调用string.format格式化为CSS文本,\n该函数名可使用'$'代替,等价于CSS!中的$函数
!layoutEle.queryElement(.("标签名[属性名='属性值']") = 使用CSS选择器语法,\n在当前节点的子节点中查找第一个符合条件节点,\n如果有多个参数则首先调用string.format格式化为CSS文本,\n该函数名可使用'$1'代替,等价于CSS!中的$1函数
!layoutEle.queryParent(.("标签名[属性名='属性值']") = 该函数等价于CSSS!脚本中的$1p函数,\n使用CSS选择器语法,在父节点中查找匹配最近的一个父节点,\n可选使用参数二指定向上搜索深度,\n如果搜索级别省略或设为0,则不限制搜索深度,\n如果该值为1,仅匹配自身
!layoutEle.testParent(.("标签名[属性名='属性值']") = 测试父节点中是否存在符合匹配的节点,\n可使用参数2指定向上搜索深度,默认为0表示不作限制,
!layoutEle.test(.("标签名[属性名='属性值']",是否测试所有父节点) = 测试节点自身是否符合匹配,\n该函数等价于 testParent(CSS选择器,1)
!layoutEle.queryElement() = !layoutEle.
!layoutEle.getElementsByName ("__") = 根据 name 查找节点集合
!layoutEle.getElementById("__") = 根据ID查找节点\n如果未找到，尝试使用name查找 
!layoutEle.getElementsByTagName("__") = 根据HTML标签名查找节点集合
!layoutEle.getElementByUid(.(UID) = 根据唯一ID在该节点所属窗口范围内查找节点
!layoutEle.setAttribute("hide","true")  = 修改属性\n也可以直接写 ele.属性名字 = "值"
!layoutEle.getAttribute("hide")  = 获取属性,返回值为字符串类型.\n也可以直接写 var 返回值=ele.属性名字
!layoutEle.getCustomAttribute("__") = 获取HTML属性,\n如果失败,则在名字前添加横线查找style自定义属性
!layoutEle.eachAttribute() = @for( i,name,value in ??.eachAttribute() ){
			 
}
!layoutEle.enumQuery(枚举函数,CSS选择器,格式化参数) = @.enumQuery(\n	function(ltEle){\n		 __/*返回true停止枚举*/\n	},"div"\n)
!layoutEle.sort(cmpFunc,firstInddex,lastIndex) = @.sort(\n	function(ltEle,ltEle2){\n		\n		return __/*比较条件,可返回-1,0,1等值表示比较结果*/ ? -1 : 1;\n	}\n)
!layoutEle.enumStyle(枚举函数) =  @.enumStyle( \n	function(selector,ruleType,file,lineNo){\n		__	\n	}\n)
!layoutEle.id = 节点ID
!layoutEle.uid = 节点唯一标志符(数值)
!layoutEle.value = 读写控件值,\n可选值类型:字符串值,数值,时间值等,\n可选使用web.layout.value 对象赋值
!layoutEle.getValueObject() = 返回控件值对象( web.layout.valueObject 对象 )\n!web_layout_value.
!layoutEle.setValueObject(.(值,单位,类型) = 值可选使用字符串,数值,时间值,或 web.layout.valueObject 对象,\n单位为可选参数,值类型(使用 _HL_T_ 前缀常量表示)为可选参数
!layoutEle.name = 节点name属性
!layoutEle.insert(__/*节点*/) = 插入子节点  
!layoutEle.append(__/*节点*/) = 追加到最后一个子节点  
!layoutEle.isEnabled() = 节点是否可用
!layoutEle.isVisible() = 节点是否可见
!layoutEle.index() = 节点在父节点child子节点集合中的索引位置
!layoutEle.update() = 更新;
!layoutEle.update(true) = 更新,\n重新计算元素的尺寸
!layoutEle.updateEx( _HL_UPDATE_ELEMENT_FLAGS__ ) = 更新;\n并调用::UpdateWindow 刷新窗口
!layoutEle.root() = 根节点\n!layoutEle.
!layoutEle.parent() = 获取父节点\n!layoutEle.
!layoutEle.nextSibling() = 获取下一个兄弟节点,可选在参数中指定偏移值\n!layoutEle.
!layoutEle.previousSibling() = 获取上一个兄弟节点,可选在参数中指定偏移值\n!layoutEle.
!layoutEle.firstSibling() = 获取第一个兄弟节点\n!layoutEle.
!layoutEle.lastSibling() = 获取最后一个兄弟节点\n!layoutEle.
!layoutEle.previous() = 上一个兄弟节点\n!layoutEle.	
!layoutEle.next() = 下一个兄弟节点\n!layoutEle.
!layoutEle.child(1__/*索引*/) = 获取子节点\n第一个子节点的索引为1
!layoutEle.child() = !layoutEle.
!layoutEle.isParent(.(父节点) = 判断参数中的节点是否父节点或自身\n参数为空值返回空
!layoutEle.isChild(.(子节点) = 判断参数中的节点是否子节点或自身\n参数为空值返回空
!layoutEle.childCount() = 获取子节点数目\n!layoutEle.
!layoutEle.eachChild(开始索引,结束索引,步进) = @for(i,eleChild in ??.eachChild(__/*可选指定开始与结束索引*/) ){
	io.print( i,eleChild.innerHTML );
} 
!layoutEle.click() = 触发节点鼠标点击事件
!layoutEle.eachChild() = !layoutEle.
!layoutEle.clone() = 复制节点,可选指定插入索引添加到父节点\n!layoutEle.
!layoutEle.clone(-1) = 复制节点并插入到原父节点的子节点头部
!layoutEle.clone(0x7FFFFFFF) = 复制节点并追加到原父节点的子节点尾部
!layoutEle.detach() = 自DOM树中分离该节点\n当引用计数清零时自动删除
!layoutEle.postEvent(.(事件ID,选项,源节点) = 触发事件,不等待返回,参数二,参数三为可选参数\n参数一也可以是事件函数名，例如"onButtonClick"
!layoutEle.sendEvent(.(事件ID,选项,源节点) = 触发事件,并等待返回,参数二,参数三为可选参数\n参数一也可以是事件函数名，例如"onButtonClick"
!layoutEle.scrollToView(.(滚动到顶部,平滑效果) = 滚动上层视图节点滚动条
!layoutEle.release() = 释放节点对象
!layoutEle.state = 节点状态,\n类似于CSSS! 脚本中使用一个冒号表示状态,\n例如 ele:hover = false,\n!htmlayout_state.
!layoutEle.style = 样式\n类似于CSSS! 脚本中使用一对冒号表示状态,\n例如 ele::width = 56px,\n!htmlayout_style.
!layoutEle.getScrollInfo() = 获取滚动条信息\n!ltEleScrollInfo.
!layoutEle.getRect(_HL__) = 返回节点区块坐标\n参数可省略,默认值为 _HL_VIEW_RELATIVE
!layoutEle.getRect() = !rect.
!layoutEle.setPos(.(x坐标,y坐标,宽,高) = 移动节点,所有参数可选
!layoutEle.popup(.(x坐标,y坐标,是否显示动画,相应坐标) = 在指定坐标弹出菜单\n参数三,四可省略,参数四可选值为1到9 = function(x=0,y=0,ani=0,point=1){
!layoutEle.popupTrack(.(x坐标,y坐标,是否显示动画,相应坐标) = 返回用户点选的菜单项\n参数三,四可省略,参数四可选值为1到9
!layoutEle.popupAnchor(.(锚节点,选项) = 弹出菜单节点\n参数2指定弹出方向,可选值(2:下,4:左;6:右 8:上)\n参数2可省略,默认为2
!layoutEle.popupHide() = 隐藏菜单节点
!layoutEle.setEventRoot() = 设为事件触发根节点\n节点之外的节点事节被禁用,\n成功返回上一个事件根节点
!layoutEle.combineUrl(.(URL) = 将相对路径转换为绝对路径
!layoutEle.setTimer(.(延时毫秒值,ID) = 如果延时值为0,取消定时器,ID可省略\n在CSSS!脚本中可触发 timer! 事件
!layoutEle.getHwnd(.(是否返回顶层窗口) = 返回窗口句柄,参数可省略,默认为false
!layoutEle.updateWindow(.(是否顶层窗口) = 更新窗口\n参数可省略,默认为false
!layoutEle.getForm() = 返回该节点所在窗体对象\n!winform.
!layoutEle.attachEventHandler(.(eventHandler,subscription) = 添加事件监听对象,\n参数一指定响应事件的对象,如果不指定则为当前节点对象,\nsubscription 可选使用 _HL_HANDLE_ 前缀常量指定捕获的事件,\n 如果不指定该参数,则根据预听义的监听函数自动设定该值,\n也可以使用对象的 _event_subsriptions 成员指定该值,\n该函数返回事件ID,用于注销监听.
!layoutEle.detachEventHandler(.(事件ID) = 注销事件监听对象,省略参数则停止节点自身事件监听

!layoutEle.onMouseEnter = @.onMouseEnter = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onMouseLeave = @.onMouseLeave = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onMouseMove = @.onMouseMove = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onMouseUp = @.onMouseUp = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onMouseDown = @.onMouseDown = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onMouseDblClick = @.onMouseDblClick = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onMouseWheel = @.onMouseWheel = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onMouseTick = @.onMouseTick = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onMouseIdle = @.onMouseIdle = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onDrop = @.onDrop = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onDragEnter = @.onDragEnter = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onDragLeave = @.onDragLeave = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onDragRequest = @.onDragRequest = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onMouseClick = @.onMouseClick = function( ltTarget,ltEle,x,y,mouseParams ) {\n	__\n}
!layoutEle.onKeyDown = @.onKeyDown = function( ltTarget,ltEle,keyCode, altState, keyParams ) {\n	__\n}
!layoutEle.onKeyUp = @.onKeyUp = function( ltTarget,ltEle,keyCode, altState, keyParams ) {\n	__\n}
!layoutEle.onKeyChar = @.onKeyChar = function( ltTarget,ltEle,keyCode, altState, keyParams ) {\n	__\n}
!layoutEle.onFocusLost = @.onFocusLost = function( ltTarget,ltEle,focusParams ) {\n	__\n}
!layoutEle.onFocusGot = @.onFocusGot = function( ltTarget,ltEle,focusParams ) {\n	__\n}
!layoutEle.xcall(.("自定义函数名",其他参数->->->) = 调用节点自定义的函数,并获取返回值
!layoutEle.setScrollPos(.(x,y,平滑效果) = x,y皆可省略,默认值为0

!layoutEle.onButtonClick = @.onButtonClick = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onButtonPress = @.onButtonPress = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onButtonStateChanged = @.onButtonStateChanged = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onEditValueChanging = @.onEditValueChanging = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onEditValueChanged = @.onEditValueChanged = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onSelectSelectionChanged = @.onSelectSelectionChanged = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onSelectStateChanged = @.onSelectStateChanged = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onPopupRequest = @.onPopupRequest = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onPopupReady = @.onPopupReady = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onPopupDismissed = @.onPopupDismissed = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onMenuItemActive = @.onMenuItemActive = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onMenuItemClick = @.onMenuItemClick = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onContextMenuSetup = @.onContextMenuSetup = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onContextMenuRequest = @.onContextMenuRequest = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onVisualStateChanged = @.onVisualStateChanged = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onDisabledStateChanged = @.onDisabledStateChanged = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onPopupDismissing = @.onPopupDismissing = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onHyperlinkClick = @.onHyperlinkClick = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onTableHeaderClick = @.onTableHeaderClick = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onTableRowClick = @.onTableRowClick = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onTableRowDblClick = @.onTableRowDblClick = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onElementCollapsed = @.onElementCollapsed = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onElementExpanded = @.onElementExpanded = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onActiveChild = @.onActiveChild = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onInitDataView = @.onInitDataView = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onRowsDataRequest = @.onRowsDataRequest = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onUiStateChanged = @.onUiStateChanged = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onFormSubmit = @.onFormSubmit = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onFormReset = @.onFormReset = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n} 
!layoutEle.onClosePopup = @.onClosePopup = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onRequestTooltip = @.onRequestTooltip = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}
!layoutEle.onAnimation = @.onAnimation = function (ltTarget,ltEle,reason,behaviorParams) {\n	__\n}

!ltEleScrollInfo.pos = !point.
!ltEleScrollInfo.rect = !rect.
!ltEleScrollInfo.size = !size.
end intellisense**/

/**intellisense()
_HLDOM_OK=@0/*_HLDOM_OK*/
_HLDOM_INVALID_HWND=@1/*_HLDOM_INVALID_HWND*/
_HLDOM_INVALID_HANDLE=@2/*_HLDOM_INVALID_HANDLE*/
_HLDOM_PASSIVE_HANDLE=@3/*_HLDOM_PASSIVE_HANDLE*/
_HLDOM_INVALID_PARAMETER=@4/*_HLDOM_INVALID_PARAMETER*/
_HLDOM_OPERATION_FAILED=@5/*_HLDOM_OPERATION_FAILED*/
_HLDOM_OK_NOT_HANDLED=@-1/*_HLDOM_OK_NOT_HANDLED*/
_HL_T_UNDEFINED=@0/*_HL_T_UNDEFINED*/
_HL_T_NULL=@1/*_HL_T_NULL*/
_HL_T_BOOL=@2/*_HL_T_BOOL*/
_HL_T_INT=@3/*_HL_T_INT*/
_HL_T_FLOAT=@4/*_HL_T_FLOAT*/
_HL_T_STRING=@5/*_HL_T_STRING*/
_HL_T_DATE=@6/*_HL_T_DATE*/
_HL_T_CURRENCY=@7/*_HL_T_CURRENCY*/
_HL_T_LENGTH=@8/*_HL_T_LENGTH*/
_HL_T_ARRAY=@9/*_HL_T_ARRAY*/
_HL_T_MAP=@0xA/*_HL_T_MAP*/
_HL_T_FUNCTION=@0xB/*_HL_T_FUNCTION*/
_HL_T_BYTES=@0xC/*_HL_T_BYTES*/
_HL_T_OBJECT=@0xD/*_HL_T_OBJECT*/
_HL_T_DOM_OBJECT=@0xE/*_HL_T_DOM_OBJECT*/
_HL_HV_OK_TRUE=@-1/*_HL_HV_OK_TRUE*/
_HL_HV_OK=@0/*_HL_HV_OK*/
_HL_HV_BAD_PARAMETER=@1/*_HL_HV_BAD_PARAMETER*/
_HL_HV_INCOMPATIBLE_TYPE=@2/*_HL_HV_INCOMPATIBLE_TYPE*/
_HL_UT_EM=@1/*_HL_UT_EM*/
_HL_UT_EX=@2/*_HL_UT_EX*/
_HL_UT_PR=@3/*_HL_UT_PR*/
_HL_UT_SP=@4/*_HL_UT_SP*/
_HL_UT_PX=@7/*_HL_UT_PX*/
_HL_UT_IN=@8/*_HL_UT_IN*/
_HL_UT_CM=@9/*_HL_UT_CM*/
_HL_UT_MM=@0xA/*_HL_UT_MM*/
_HL_UT_PT=@0xB/*_HL_UT_PT*/
_HL_UT_PC=@0xC/*_HL_UT_PC*/
_HL_UT_DIP=@0xD/*_HL_UT_DIP*/
_HL_UT_COLOR=@0xF/*_HL_UT_COLOR*/
_HL_UT_URL=@0x10/*_HL_UT_URL*/
_HL_UT_SYMBOL=@0xFFFF/*_HL_UT_SYMBOL*/
_HL_UPDATE_ELEMENT_FLAGS_RESET_STYLE_THIS=@0x20/*_HL_UPDATE_ELEMENT_FLAGS_RESET_STYLE_THIS*/
_HL_UPDATE_ELEMENT_FLAGS_RESET_STYLE_DEEP=@0x10/*_HL_UPDATE_ELEMENT_FLAGS_RESET_STYLE_DEEP*/
_HL_UPDATE_ELEMENT_FLAGS_MEASURE_INPLACE=@1/*_HL_UPDATE_ELEMENT_FLAGS_MEASURE_INPLACE*/
_HL_UPDATE_ELEMENT_FLAGS_MEASURE_DEEP=@2/*_HL_UPDATE_ELEMENT_FLAGS_MEASURE_DEEP*/
_HL_UPDATE_ELEMENT_FLAGS_REDRAW_NOW=@0x8000/*_HL_UPDATE_ELEMENT_FLAGS_REDRAW_NOW*/

_HL_ROOT_RELATIVE=@1/*_HL_ROOT_RELATIVE*/
_HL_SELF_RELATIVE=@2/*_HL_SELF_RELATIVE*/
_HL_CONTAINER_RELATIVE=@3/*_HL_CONTAINER_RELATIVE*/
_HL_VIEW_RELATIVE=@4/*_HL_VIEW_RELATIVE*/
_HL_CONTENT_BOX=@0/*_HL_CONTENT_BOX*/
_HL_PADDING_BOX=@0x10/*_HL_PADDING_BOX*/
_HL_BORDER_BOX=@0x20/*_HL_BORDER_BOX*/
_HL_MARGIN_BOX=@0x30/*_HL_MARGIN_BOX*/
_HL_BACK_IMAGE_AREA=@0x40/*_HL_BACK_IMAGE_AREA*/
_HL_FORE_IMAGE_AREA=@0x50/*_HL_FORE_IMAGE_AREA*/
_HL_SCROLLABLE_AREA=@0x60/*_HL_SCROLLABLE_AREA*/

_HL_CTL_NO=@0/*_HL_CTL_NO*/
_HL_CTL_UNKNOWN=@1/*_HL_CTL_UNKNOWN*/
_HL_CTL_EDIT=@2/*_HL_CTL_EDIT*/
_HL_CTL_NUMERIC=@3/*_HL_CTL_NUMERIC*/
_HL_CTL_BUTTON=@4/*_HL_CTL_BUTTON*/
_HL_CTL_CHECKBOX=@5/*_HL_CTL_CHECKBOX*/
_HL_CTL_RADIO=@6/*_HL_CTL_RADIO*/
_HL_CTL_SELECT_SINGLE=@7/*_HL_CTL_SELECT_SINGLE*/
_HL_CTL_SELECT_MULTIPLE=@8/*_HL_CTL_SELECT_MULTIPLE*/
_HL_CTL_DD_SELECT=@9/*_HL_CTL_DD_SELECT*/
_HL_CTL_TEXTAREA=@0xA/*_HL_CTL_TEXTAREA*/
_HL_CTL_HTMLAREA=@0xB/*_HL_CTL_HTMLAREA*/
_HL_CTL_PASSWORD=@0xC/*_HL_CTL_PASSWORD*/
_HL_CTL_PROGRESS=@0xD/*_HL_CTL_PROGRESS*/
_HL_CTL_SLIDER=@0xE/*_HL_CTL_SLIDER*/
_HL_CTL_DECIMAL=@0xF/*_HL_CTL_DECIMAL*/
_HL_CTL_CURRENCY=@0x10/*_HL_CTL_CURRENCY*/
_HL_CTL_SCROLLBAR=@0x11/*_HL_CTL_SCROLLBAR*/
_HL_CTL_HYPERLINK=@0x12/*_HL_CTL_HYPERLINK*/
_HL_CTL_MENUBAR=@0x13/*_HL_CTL_MENUBAR*/
_HL_CTL_MENU=@0x14/*_HL_CTL_MENU*/
_HL_CTL_MENUBUTTON=@0x15/*_HL_CTL_MENUBUTTON*/
_HL_CTL_CALENDAR=@0x16/*_HL_CTL_CALENDAR*/
_HL_CTL_DATE=@0x17/*_HL_CTL_DATE*/
_HL_CTL_TIME=@0x18/*_HL_CTL_TIME*/
_HL_CTL_FRAME=@0x19/*_HL_CTL_FRAME*/
_HL_CTL_FRAMESET=@0x1A/*_HL_CTL_FRAMESET*/
_HL_CTL_GRAPHICS=@0x1B/*_HL_CTL_GRAPHICS*/
_HL_CTL_SPRITE=@0x1C/*_HL_CTL_SPRITE*/
_HL_CTL_LIST=@0x1D/*_HL_CTL_LIST*/
_HL_CTL_RICHTEXT=@0x1E/*_HL_CTL_RICHTEXT*/
_HL_CTL_TOOLTIP=@0x1F/*_HL_CTL_TOOLTIP*/
_HL_CTL_HIDDEN=@0x20/*_HL_CTL_HIDDEN*/
_HL_CTL_URL=@0x21/*_HL_CTL_URL*/
_HL_CTL_TOOLBAR=@0x22/*_HL_CTL_TOOLBAR*/
_HL_CTL_FORM=@0x23/*_HL_CTL_FORM*/
end intellisense**/
