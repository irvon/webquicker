//tabs 选项卡
namespace web.layout.behavior.tabs;

/*内部函数用var语句声明{{*/

	var isInFocus = function(ltEle) {
    	return ltEle.test(":focus",true) ;
    }
    
    var targetTab;
    targetTab = function( ele,tabsContainer) {
      if( !ele || (ele == tabsContainer) ) 
        return; 
        
      if( ele.getAttribute("panel") )
        return ele;

      return targetTab( ele.parent(), tabsContainer );
    }
 
 	//实现tab控件切换效果
    var selectTab = function( ltEle,eleTab) {
    	
    	// already selected, nothing to do..
  		if( eleTab.state.current ) 
    		return true; // but we've handled it.
 		
  		//find currently selected element (tab and panel) and remove "selected" from them
  		var elePanelPrev = ltEle.queryElement(":root>[name]:expanded");
  		var eleTabPrev = ltEle.queryElement(":root>.strip>[panel]:current");
		
  		// find new tab and panel       
  		var panelName = eleTab.getAttribute("panel");
  		var elePanel = ltEle.queryElement(':root>[name="%s"]', panelName);
  		
  		if( !elePanel || !eleTab ) {
    		// panel="somename" without matching name="somename"
    		return true;
  		}
		
  		if( elePanelPrev ) {
  			// remove selected attribute - just in case somone is using attribute selectors    
    		elePanelPrev.selected = null; // eleTabPrev.setAttribute("selected",null)
    		elePanelPrev.state.collapsed = true; // elePanelPrev.modifyState( 0x400/*_HL_STATE_COLLAPSED*/ );
  		}
  		if( eleTabPrev ) {
    		eleTabPrev.selected = null;
    		elePanelPrev.state.current = true;
  		}
  		
  		elePanel.selected = ""; 
  		elePanel.state.expanded = true;
  		
  		eleTab.selected = ""
  		eleTab.state.current = true;
              		 
  		if(eleTabPrev) eleTabPrev.postEvent("onElementCollapsed");
  		eleTab.postEvent("onElementExpanded"); 
  		/*
  		NOTE #1: these event will bubble from panel elements up to the root so panel itself, tabs ctl, its parent, etc.
  			will receive these notifications. Handle them if you need to change UI dependent from current tab. 
  			
  		NOTE #2: while handling this event in:
  			onKeyDown = function (ltTarget,ltEle,keyCode, altState, keyParams)
  			onKeyUp = function (ltTarget,ltEle,keyCode, altState, keyParams)	 
  			ltTarget is the panel element being collapsed/expanded 
  		*/
  		
  		return true;  
    }
 
	var findTab = function( ltEle, eleTab,direction ) { 
  		var eleTabNew;
  		select( direction ) {
			case -2{
    			eleTabNew = ltEle.firstSibling(); 
    			while( eleTabNew ) {
       			if( !layoutEle.state.disabled )
        			break;
        			
       			eleTabNew = eleTabNew.nextSibling();
    			}
 			}
			case -1{
    			eleTabNew = eleTab.previousSibling(); 
    			while( eleTabNew )  {
        			if( !layoutEle.state.disabled )
           				break;
           				
        			eleTabNew = eleTabNew.previousSibling();
    			}
			}
			case 1{
    			eleTabNew = eleTab.nextSibling(); 
    			while( eleTabNew )  {
        			if( !layoutEle.state.disabled )
           				break;
           				
        			eleTabNew = eleTabNew.nextSibling();
    			}
			}
			case 2{  
    			eleTabNew = eleTab.lastSibling(); 
    			while( eleTabNew )  {
        			if( !layoutEle.state.disabled )
           				break;
           				
        			eleTabNew = eleTabNew.previousSibling();
    			}
			} 
        }

		if( !eleTabNew || !eleTabNew.getAttribute("panel")  )  //is not a tab element
        	return false;

      	return selectTab( ltEle, eleTabNew );
    }
 
 /*}}*/   

/*事件回调函数名都是以on开头{{*/ 

   	onAttach = function( ltEle ){  
		//:root below matches the element we use to start lookup from.
   		var eleTab = ltEle.queryElement(":root>.strip>[panel][selected]"); // initialy selected

    	var panelName = eleTab.getAttribute("panel");
    	// find panel we need to show by default 
		var elePanel = ltEle.queryElement(':root>[name="%s"]', panelName);
		if( !elePanel)  {
    		//what a ...!, panel="somename" without matching name="somename"
        	return;
      	}

      var eleTabStrip = eleTab.parent();
      eleTabStrip.state.current = true; // :current - make tab strip as current element inside focusable.
      eleTab.state.current = true; // :current - current tab is, well, current.
      elePanel.state.expanded = true; // :expanded - current panel is expanded..
	}
	  
	onActiveChild = function (ltTarget,ltEle,reason,behaviorParams) {
		var newtab = targetTab(ltTarget,ltEle);
        if(!newtab)  { 
        	return true; // ltTarget is not a tab here.
        }
         
        selectTab(ltEle,newtab);
        return true;
	}
 
	onMouseDown = function (ltTarget,ltEle, x,y,mouseParams) {
		var eleTab = targetTab( ltTarget, ltEle ); 
		if(!eleTab)  return false;
		
		return selectTab( ltEle, eleTab )
	} 
	
	onMouseDblClick = function (ltTarget,ltEle, x,y,mouseParams) {
		var eleTab = targetTab( ltTarget, ltEle ); 
		if(!eleTab)  return false;
		
		return selectTab( ltEle, eleTab )
	} 
	
	onKeyDown = function (ltTarget,ltEle, keyCode, altState, keyParams) {
		 
  		var eleTab = ltEle.queryElement(":root>.strip>[panel]:current"); // currently selected
		
  		select( code ) {
    		case 0x9/*_VK_TAB*/ {
    			if( altState & 1/*_HL_CONTROL_KEY_PRESSED*/ )
                	return findTab( ltEle, eleTab, 
                             		keyboardStates & 2/*_HL_SHIFT_KEY_PRESSED*/? -1:1 );
            }
    		case 0x25/*_VK_LEFT*/ {
    			return isInFocus(eleTab)? findTab( ltEle, eleTab, -1 ) ;
    		}
    		case 0x27/*_VK_RIGHT*/{
    			return isInFocus(eleTab)? findTab( ltEle, eleTab, 1 ) 
    		}
    		case 0x24/*_VK_HOME*/{
    			return isInFocus(eleTab)? findTab( ltEle, eleTab, -2 ) 
    		}
    		case 0x23/*_VK_END*/{
    			return isInFocus(eleTab)? findTab( ltEle, eleTab, 2 ) 
    		};
  		}
  		return false; 
	} 
	/*}}*/
	 
/*其他成员函数可在CSS脚本中直接调用{{*/
	self.select = function(ltEle /*our tabs container*/,panelName){ 
		if(!panelName)
			error("参数错误",1);
			 
        var eleTab = ltEle.queryElement( ":root>.strip>[panel=%s]", panelName ); 
        selectTab(ltEle, eleTab);
	}
/*}}*/
