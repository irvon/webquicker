 
namespace gdip ;
 
//创建类
class stringformat { 

	ctor(formatAttributes=0,language=0){ 
		this.pStringFormat = gdip.assert(  gdip.CreateStringFormat (formatAttributes,language)   )    
		 
		
		if(!this.pStringFormat)
			error("参数错误",2)
	
	}

	@metaProperty//元表指向属性表
}

namespace stringformat{

	gdip = ..gdip;
	
	import util.metaProperty;//导入属性表支持库
	metaProperty = util.metaProperty(
	
	 	align = {
			_get = function(){ 
				return gdip.assert(  gdip.GetStringFormatAlign(owner[["pStringFormat"]], 0) ); 
			} 
			_set = function(v){ 
				gdip.assert( gdip.SetStringFormatAlign(owner[["pStringFormat"]], v) );
			}  	
		}; 
	 	
		delete = function(){
			gdip.DeleteStringFormat(owner[["pStringFormat"]])
			owner[["pStringFormat"]] = null;//让破他的函数都用不了
		}
		
		//自动转换为API指针
		_topointer = function(){
			return owner[["pStringFormat"]];
		}
	) 


}
 
/**intellisense()
gdip.image("__/*请输入文件路径\n或图片数据*/") = 创建GDI+L图片对象
!gdipimage.width = 宽度
!gdipimage.graphics  = 从图像创建画布
!gdipimage.height = 高度
!gdipimage.save("__/*请输入文件路径*/") = 保存文件
!gdipimage.dispose() = 释放图像
?gdip.image = !gdipimage.
end intellisense**/
