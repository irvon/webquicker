//tcc for AAuto
//tcc http://bellard.org/tcc/

//修改源代码以后,在快手中点击"编译(F8)",存为"快手目录/lib/tcc/_.aau" 即可

 //这里我是直接包含该dll，编译后可以脱离dll运行
//也可以重新编译该tcc.dll，将aau文件放到"LIB->IMPORT"的资源中，用DLL直接作为库文件
var dll = raw.loadDll($"/.dll/tcclib.dll");   
var exe = raw.loadDll()


 
class tcc{
	ctor(){
	
		var state = new();  
		set_lib_path(state,_rootdir); 
		
		//只有设定上面的默认目录,下面的函数才会真正的设定默认lib include等目录
		set_output_type(state, 0x0/*_TCC_OUTPUT_MEMORY*/);  
		
		this._io_open = ..raw.tocdecl(..io.open,"void()") 
		add_symbol(state, "io_open",this._io_open  );
		define_symbol(state,"io_reopen()",'
			io_open();
			freopen("CONIN$", "r+t", stdin);  
			freopen("CONOUT$", "w+t", stdout);  
			freopen("CONOUT$", "w+t", stderr)'
			);
	 
		var errproc = function(opaque,msg){
			if(this.onerr)
				this.onerr(msg);
			else
				this.err_msg = msg;
		} 
		this._errproc_c = ..raw.tocdecl(errproc,"int(pointer opaque,string.msg )"); 
		set_error_func(state,null,this._errproc_c)
		
		this.data = {};
		this.pfun = {};
	};
	
	close  = function(){
		delete(state)
		state = null;
	}
	
	addLibPath = function(path){
		return add_library_path(state, path)!=-1;
	}
	
	addIncludePath = function(path){
		return add_include_path(state, path)!=-1;
	}
	
	define = function(name,value){
		if(value)
			define_symbol(state,name,value);
		else
			undefine_symbol(state,name)
	}
	
	compile = function(code){
		if (compile_string(state, code) != 0){
			if( this.onerr )
				return false;
				
			error('compile error:'+ ( this.err_msg : "") , 2 ) 
		}
		return true;
	}
	
	addFile = function(...){  
		for(i,path in {...} )  
			if( add_file(state,..io.fullpath(path) ) == -1){
				error('Failed to add file:\n' + path,2); 
			}
	} 
	
	addLib = function(...){ 
		//cmd: -l+pathname e.g.-lgdi32 -luser32 
		//动态库必须在lib目录下可找到 库名.def 文件,
		//静态库必须在lib目录下可找到 lib库名.a 文件
		SetCurrentDirectory(_rootdir ); //在目录 "\lib\tcc\.res" 查找DLL
		
		for(i,path in {...} )  
			if( add_library(state,path) == -1){
				error('Failed to add library:\n' + path,2); 
			}
	} 
	
	loadDll = function(...){
		return addLib(...)
	}
	
	setCdecl = function(func,name,proto){ 
		var pfun = ..raw.tocdecl(func,proto)
		this.pfun[name] = pfun 
		add_symbol(state, name,pfun );
	}
	 
	relocate = function(){ 
			
		var size = relocate(state);
		if (size == -1) return 1;
		
		var data = ..raw.malloc(size);
		relocate(state, data);
		..table.push(this.data,data);
	}
	 
	getCdecl = function(name,proto){
		if( ! (#this.data) ) 
			this.relocate(); 
			
		var func = get_symbol(state, name);
		if (!func) return;
		return exe.api(func,proto,"cdecl"); 
	} 
	
	run = function(...){ 
		if( #(this.data) ){ 
			error("DO NOT call ?.relocate() before",2);
		}
			
		var argv = { ..io._exepath ;  ...};
		return run( state,#argv,{pointer argv[]=argv } );
	}
	 
	output = function(path,code){ 
		var ext = ..string.right(path,4);
		ext = ..string.lower(ext);
		if( ..string.endWith(ext,".o") || ext == ".obj" ){
			set_output_type(state, 0x3/*_TCC_OUTPUT_OBJ*/ ); 
		}
		elseif( ext == ".exe"  ){
			set_output_type(state, 0x1/*_TCC_OUTPUT_EXE*/);  
		}
		elseif( ext == ".dll" ){
			set_output_type(state, 0x2/*_TCC_OUTPUT_DLL*/); 
		}     
		
		if( #(this.data) ){ 
			error("DO NOT call ?.relocate() before",2);
		}
		
		if(!code)
			error("Parameter '@1' is not a valid C code!",2);
			
		if(  !this.compile(code) ){
			return;
		}
		output_file(state,..io.fullpath(path) );
		set_output_type(state, 0x0/*_TCC_OUTPUT_MEMORY*/); 
	}
	
}

namespace tcc{
	//TCC默认目录(包含include,lib子目录)
	_rootdir =  ..io._exedir + "\lib\tcc\.res" ;
	_libdir = _rootdir + "\lib"
	_includedir = _rootdir + "\include"
	
	new = dll.api("tcc_new","pointer()" ,"cdcel")
	delete = dll.api("tcc_delete","void(POINTER state)" ,"cdcel")
	//enable_debug = dll.api("tcc_enable_debug","void(POINTER state)" ,"cdcel")
	set_error_func = dll.api("tcc_set_error_func","void(POINTER state,pointer error_opaque,pointer error_func )" ,"cdcel")
	
	set_warning = dll.api("tcc_set_warning","int(POINTER state,string warning_name, int value)" ,"cdcel")
	add_include_path = dll.api("tcc_add_include_path","int(POINTER state,string pathname)" ,"cdcel")
	add_sysinclude_path = dll.api("tcc_add_sysinclude_path","int(POINTER state,string pathname)" ,"cdcel")
	define_symbol = dll.api("tcc_define_symbol","void(POINTER state,string sym,string value)" ,"cdcel")
	undefine_symbol = dll.api("tcc_undefine_symbol","void(POINTER state,string sym)" ,"cdcel")
	add_file = dll.api("tcc_add_file","int(POINTER state,string filename)" ,"cdcel")
	compile_string = dll.api("tcc_compile_string","int(POINTER state,string buf)" ,"cdcel")
	set_output_type = dll.api("tcc_set_output_type","int(POINTER state,int output_type)" ,"cdcel")
	add_library_path = dll.api("tcc_add_library_path","int(POINTER state,string pathname)" ,"cdcel")
	add_library = dll.api("tcc_add_library","int(POINTER state,string libraryname)" ,"cdcel")
	add_symbol = dll.api("tcc_add_symbol","int(POINTER state,string name,point val)" ,"cdcel") 
	output_file = dll.api("tcc_output_file","int(POINTER state,string filename)" ,"cdcel")
	run = dll.api("tcc_run","int(POINTER state,int argc,struct argv)" ,"cdcel") 
	relocate = dll.api("tcc_relocate","int(POINTER state,pointer ptr)" ,"cdcel")
	get_symbol = dll.api("tcc_get_symbol","pointer(POINTER state,string name)" ,"cdcel")
	set_lib_path = dll.api("tcc_set_lib_path","void(POINTER state,string path)" ,"cdcel")
	
	SetCurrentDirectory := ::Kernel32.api( "SetCurrentDirectory", "int(string path )"); 
}
 
 /**intellisense()
_TCC_OUTPUT_MEMORY=@0x0/*_TCC_OUTPUT_MEMORY*/
_TCC_OUTPUT_EXE=@0x1/*_TCC_OUTPUT_EXE*/
_TCC_OUTPUT_DLL=@0x2/*_TCC_OUTPUT_DLL*/
_TCC_OUTPUT_OBJ=@0x3/*_TCC_OUTPUT_OBJ*/
_TCC_OUTPUT_PREPROCESS=@0x4/*_TCC_OUTPUT_PREPROCESS*/
_TCC_OUTPUT_FORMAT_ELF=@0x0/*_TCC_OUTPUT_FORMAT_ELF*/
_TCC_OUTPUT_FORMAT_BINARY=@0x1/*_TCC_OUTPUT_FORMAT_BINARY*/
_TCC_OUTPUT_FORMAT_COFF=@0x2/*_TCC_OUTPUT_FORMAT_COFF*/
end intellisense**/

/**intellisense()
?tcc = !tcc.
!tcc.onerr = @.onerr = function(msg){
	io.print( msg )
}
!tcc.addIncludePath("__/*头文件目录*/") = 添加头文件目录
!tcc.addLibPath("__/*库目录*/") = 添加库目录
!tcc.addLib = @.addLib(\n 	"user32",\n	"kernel32",\n	"gdi32"\n)
!tcc.addFile = @.addFile("/bin__.o")
!tcc.output = @.output("bin.o",__/*输入C源码*/)
!tcc.define("__/*预处理器符号*/","") = 定义预处理器符号,如果值为null则删除该定义.
!tcc.compile(__/*C源码*/) = 编译C源码
!tcc.setCdecl = @.setCdecl(\n	"函数名",\n	function(){\n		__\n	},\n	"void()"\n)
!tcc.getCdecl("__/*函数名*/","void()") = 获取编译后的C函数\n如果从未调用过relocate()则自动调用.
!tcc.relocate() = 重定位\n此函数在调用getCdecl()前被自动调用.
!tcc.close() = 关闭C语言解释器
!tcc.run() = 编译并执行int main() 入口函数.\n可添加任意多个字符串参数
tcc() = 创建TCC C语言解释器
tcc._rootdir = TCC根目录,需要的DLL组件目录;
tcc._libdir = 默认库目录
tcc._includedir = 默认头文件目录 
io_reopen() = 重定向到已经打开的AAuto控制台窗口\n如果C语言生成独立的exe文件,不应使用此函数.
end intellisense**/
