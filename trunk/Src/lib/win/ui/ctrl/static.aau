namespace win.ui.ctrl; 
import win.ui.ctrl.metaProperty;//导入控件属性元表支持

class static{
    ctor(parent,tvalue){ 
    	if(tvalue){
			if(tvalue.edge) tvalue.exstyle |= 0x20000/*_WS_EX_STATICEDGE*/;	
			if(tvalue.transparent)tvalue.exstyle |= 0x20/*_WS_EX_TRANSPARENT*/;
			if(tvalue.notify)tvalue.style |= 0x100/*_SS_NOTIFY*/ 
			
			select(tvalue.align) {
				case  "center"  
				tvalue.style |= 0x1/*_SS_CENTER*/; 
				case "right" 
	   			tvalue.style |= 0x2/*_SS_RIGHT*/; 
				else  
	   			tvalue.style |= 0x0/*_SS_LEFT*/;
			}
		}
    }
	@metaProperty;
}
static.metaProperty = ..win.ui.ctrl.metaProperty( )
 
/***intellisense() 
!static.hwnd = 控件句柄
!static.id = 控件ID
!static.text = 控件文本
!static.parent = 父窗口
!static.parent.hwnd = 父窗口句柄
!static.hide = 控件是否隐藏
!static.disabled = 控件ID
!static.left = 左侧坐标
!static.right = 右侧坐标
!static.top = 顶部坐标
!static.bottom = 底部坐标
!static.redraw() = 刷新
!static.show(true__) = 显示控件
!static.rect = 控件区块位置(::RECT结构体)
!static.clientRect =  控件客户区块位置(::RECT结构体)
!static.font = 控件字体(::LOGFONT结构体)
!static.clientRect =  获取控件客户区块位置(::RECT结构体)
!static.theme = 外观主题,例如\nwinform.button.theme = "Explorer"\nwinform.button.theme = false
!static.modifyStyle(.(remove,add) = 如果指定第三个参数，则使用此参数调用::SetWidnowPos 
!static.modifyStyleEx(.(remove,add) = 如果指定第三个参数，则使用此参数调用::SetWidnowPos
!static.capture = 是否捕获全局鼠标消自息
!static.close() = 关闭控件窗口
!static.invalidate(__/*可选使用::RECT()对象指定客户区*/) = 使窗口绘图区无效
!static.invalidate(__/*可选使用::RECT()对象指定客户区*/,0) = 使窗口绘图区无效\n不刷新背景
!static.update() = 重绘invalidate函数指定的区块
!static.setFocus() = 设置焦点 
!static.setPos(.(x坐标,y坐标,宽,高,插入位置,参数) = 调整窗口位置或排序,所有参数可选\n同时指定x,y坐标则移动位置\n同时指定宽高则改变大小\n指定插入位置(句柄或_HWND前缀常量)则调整Z序
!static.getPos() = 返回相对坐标,宽,高\nx,y,cx,cy=win.getPos(hwnd)
?win.ui.ctrl.static  =!static.
end intellisense***/
 
