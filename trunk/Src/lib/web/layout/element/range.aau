
assert(web.layout.element); 
import util.metaProperty;
namespace web.layout.element;

class range{
	ctor(hRange){
		this.hRange = hRange;
		table.add_gc(this,"release")
	}
	@_metaProperty;
}

namespace range { 

	class HPOSITION{ 
		pointer he; 
		int pos; 
	} 
	
	RangeCreate = dll.api("HTMLayoutRangeCreate","int(POINTER he,pointer& pRange,bool outer)");
	RangeFromSelection = dll.api("HTMLayoutRangeFromSelection","int(POINTER he,pointer& pRange)");
	RangeRelease = dll.api("HTMLayoutRangeRelease","int(POINTER range)");
	
	RangeFromPositions = dll.api("HTMLayoutRangeFromPositions","int(POINTER he,struct& posStart,struct& posEnd)");
	RangeAdvancePos = dll.api("HTMLayoutRangeAdvancePos","int(POINTER range,INT cmd,int& c,struct& pPos)");
	
	RangeToHtml = dll.api("HTMLayoutRangeToHtml","int(POINTER range,string &pHtmlUtf8Bytes,INT& numBytes)");
	RangeReplace = dll.api("HTMLayoutRangeReplace","int(POINTER range,pointer pHtmlUtf8Bytes,INT numBytes)");
	RangeInsertHtml = dll.api("HTMLayoutRangeInsertHtml","int(struct pPosition,pointer pHtmlUtf8Bytes,INT numBytes)");
	RangeIsEmpty = dll.api("HTMLayoutRangeIsEmpty","int(POINTER range,bool& pResult)");
	 
	_metaProperty = ..util.metaProperty( )
}

	/**intellisense()
_HL_ADVANCE_TO_GO_FIRST=@0/*_HL_ADVANCE_TO_GO_FIRST*/
_HL_ADVANCE_TO_GO_LAST=@1/*_HL_ADVANCE_TO_GO_LAST*/
_HL_ADVANCE_TO_GO_NEXT=@2/*_HL_ADVANCE_TO_GO_NEXT*/
_HL_ADVANCE_TO_GO_PREV=@3/*_HL_ADVANCE_TO_GO_PREV*/
_HL_ADVANCE_TO_GO_NEXT_CHAR=@4/*_HL_ADVANCE_TO_GO_NEXT_CHAR*/
_HL_ADVANCE_TO_GO_PREV_CHAR=@5/*_HL_ADVANCE_TO_GO_PREV_CHAR*/
end intellisense**/